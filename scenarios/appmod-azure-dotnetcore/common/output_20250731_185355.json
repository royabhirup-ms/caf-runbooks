{
  "settings": {
    "components": {
      "code": true,
      "binaries": false
    },
    "targetId": "Any",
    "runConfig": {
      "analysis": {
        "settings": {
          "binaries": {
            "useDefaultExclusions": true,
            "include": [],
            "exclude": [
              "**/csc.*",
              "**/csi.*",
              "**/EntityFramework.*",
              "**/EntityFramework*",
              "**/Microsoft*",
              "**/mscorlib.*",
              "**/netstandard.*",
              "**/System*",
              "**/vbc.*",
              "**/VBCSCompiler.*",
              "**/Yarp.ReverseProxy*"
            ]
          }
        },
        "rules": [
          {
            "id": "Database.0101",
            "description": "You are using Amazone S3 database that is not supported in Azure. You can use Azure Blob Storage instead. The following is the details link about Azure Blob Storage.",
            "label": "Amazone S3 dependency detected",
            "severity": "Potential",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "Azure Blob Storage",
                "url": "https://learn.microsoft.com/azure/storage/blobs"
              }
            ],
            "enabled": true
          },
          {
            "id": "Database.0102",
            "description": "You are using Oracle database that is not supported in Azure. You can use Azure PostgreSQL instead. The following is the details link about Azure PostgreSQL.",
            "label": "Oracle dependency detected",
            "severity": "Potential",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "Azure PostgreSQL",
                "url": "https://learn.microsoft.com/azure/postgresql/flexible-server"
              }
            ],
            "enabled": true
          },
          {
            "id": "Database.0103",
            "description": "You are using DB2 database that is not supported in Azure. You can use Azure PostgreSQL instead. The following is the details link about Azure PostgreSQL.",
            "label": "DB2 dependency detected",
            "severity": "Potential",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "Azure PostgreSQL",
                "url": "https://learn.microsoft.com/azure/postgresql/flexible-server"
              }
            ],
            "enabled": true
          },
          {
            "id": "Database.0104",
            "description": "You are using minio storage that is not supported in Azure. You can use Azure Blob Storage instead. The following is the details link about Azure Blob Storage.",
            "label": "Minio dependency detected",
            "severity": "Potential",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "Azure Blob Storage",
                "url": "https://learn.microsoft.com/azure/storage/blobs"
              }
            ],
            "enabled": true
          },
          {
            "id": "Database.0105",
            "description": "System.Data.SqlClient dependency is detected. While System.Data.SqlClient will work in Azure, the newer Microsoft.Data.SqlClient package is the primary .NET SQL client moving forward and receiving the latest features. For example, Microsoft.Data.SqlClient easily allows use of Azure Managed Identity from a connection string.",
            "label": "System.Data.SqlClient dependency detected",
            "severity": "Optional",
            "effort": 3,
            "state": "Active",
            "links": [
              {
                "url": "https://go.microsoft.com/fwlink/?LinkID=2242668"
              }
            ],
            "enabled": true
          },
          {
            "id": "Logging.0101",
            "description": "Windows Event Log detected. Consider using OpenTelemetry for modern, cloud-native logging and observability. OpenTelemetry provides better portability, structured logging, and integration with Azure Monitor and Application Insights.",
            "label": "Windows Event Log for logging detected",
            "severity": "Potential",
            "effort": 3,
            "state": "Active",
            "links": [
              {
                "title": "OpenTelemetry for .NET",
                "url": "https://learn.microsoft.com/dotnet/core/diagnostics/observability-with-otel"
              },
              {
                "title": "Azure Monitor OpenTelemetry",
                "url": "https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-overview"
              },
              {
                "title": "Migrate from Event Log to OpenTelemetry",
                "url": "https://opentelemetry.io/docs/languages/net/getting-started/"
              }
            ],
            "enabled": true
          },
          {
            "id": "Logging.0102",
            "description": "Serilog logging framework detected. While Serilog is a popular logging framework, consider migrating to OpenTelemetry for better cloud-native observability and standardized telemetry. OpenTelemetry provides unified logging, metrics, and tracing with better Azure integration.",
            "label": "Serilog logging framework detected",
            "severity": "Optional",
            "effort": 4,
            "state": "Active",
            "links": [
              {
                "title": "OpenTelemetry for .NET",
                "url": "https://learn.microsoft.com/dotnet/core/diagnostics/observability-with-otel"
              },
              {
                "title": "Migrate from Serilog to OpenTelemetry",
                "url": "https://opentelemetry.io/docs/languages/net/getting-started/"
              },
              {
                "title": "Azure Monitor OpenTelemetry",
                "url": "https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-overview"
              }
            ],
            "enabled": true
          },
          {
            "id": "Logging.0103",
            "description": "Log4Net logging framework detected. Log4Net is an older logging framework with limited cloud-native capabilities. Consider migrating to OpenTelemetry for modern observability, better performance, and seamless Azure Monitor integration.",
            "label": "Log4Net logging framework detected",
            "severity": "Optional",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "OpenTelemetry for .NET",
                "url": "https://learn.microsoft.com/dotnet/core/diagnostics/observability-with-otel"
              },
              {
                "title": "Migrate from Log4Net to OpenTelemetry",
                "url": "https://opentelemetry.io/docs/languages/net/getting-started/"
              },
              {
                "title": "Azure Monitor OpenTelemetry",
                "url": "https://learn.microsoft.com/azure/azure-monitor/app/opentelemetry-overview"
              }
            ],
            "enabled": true
          },
          {
            "id": "Queue.0101",
            "description": "You are using local Kafka that is not supported in Azure. You can use Azure Kafka or Azure Event Hubs for Apache Kafka instead. The following is the details link about Azure Kafka and Azure Event Hubs for Apache Kafka.",
            "label": "Local kafka dependency detected",
            "severity": "Potential",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "Azure Kafka",
                "url": "https://learn.microsoft.com/en-us/azure/partner-solutions/apache-kafka-confluent-cloud/overview"
              },
              {
                "title": "Azure Event Hubs for Apache Kafka",
                "url": "https://learn.microsoft.com/en-us/azure/event-hubs/azure-event-hubs-apache-kafka-overview"
              }
            ],
            "enabled": true
          },
          {
            "id": "Security.0101",
            "description": "Windows Authentication (Negotiate) detected. The application is using Windows Authentication via Negotiate protocol which may not work as expected in Azure App Service. Consider using Azure Active Directory (Azure AD) authentication instead for better cloud compatibility and security.",
            "label": "Windows Authentication (Negotiate) detected",
            "severity": "Potential",
            "effort": 5,
            "state": "Active",
            "links": [
              {
                "title": "Azure AD authentication for ASP.NET Core",
                "url": "https://learn.microsoft.com/azure/active-directory/develop/quickstart-v2-aspnet-core-webapp"
              },
              {
                "title": "Migrate from Windows Authentication to Azure AD",
                "url": "https://learn.microsoft.com/azure/active-directory/develop/scenario-web-app-sign-user-overview"
              }
            ],
            "enabled": true
          }
        ],
        "analyzers": [
          {
            "ruleId": "Database.0101",
            "id": "Database.0101.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "Amazon.S3.*"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Database.0102",
            "id": "Database.0102.Types",
            "traits": "",
            "state": "Active",
            "kind": "type",
            "properties": {
              "fullTypes": [
                "Oracle.DataAccess.Client.OracleConnection",
                "Oracle.DataAccess.Client.DataTable",
                "Oracle.DataAccess.Client.OracleDataAdapter"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Database.0103",
            "id": "Database.0103.Types",
            "traits": "",
            "state": "Active",
            "kind": "type",
            "properties": {
              "fullTypes": [
                "IBM.Data.DB2.DB2Command",
                "IBM.Data.DB2.DB2Connection",
                "IBM.Data.DB2.DB2DataReader"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Database.0104",
            "id": "Database.0104.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "Minio",
                "Minio.*"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Queue.0101",
            "id": "Queue.0101.Types",
            "traits": "",
            "state": "Active",
            "kind": "type",
            "properties": {
              "fullTypes": [
                "Confluent.Kafka.IProducer",
                "Confluent.Kafka.Producer",
                "Confluent.Kafka.ProducerBuilder",
                "Confluent.Kafka.ProducerConfig"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Queue.0101",
            "id": "Queue.0101.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "Confluent.Kafka.*"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0003",
            "id": "Security.0003.PasswordInCode",
            "traits": "",
            "state": "Active",
            "kind": "literal",
            "properties": {
              "strings": [
                "password",
                "pwd",
                "Password",
                "Pwd",
                "secret",
                "Secret"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0003",
            "id": "Security.0003.PasswordInJson1",
            "traits": "",
            "state": "Active",
            "kind": "json",
            "properties": {
              "file": "appSettings.json|appsettings.*.json",
              "path": "password"
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0003",
            "id": "Security.0003.PasswordInJson2",
            "traits": "",
            "state": "Active",
            "kind": "json",
            "properties": {
              "file": "appSettings.json|appsettings.*.json",
              "path": "Password"
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0003",
            "id": "Security.0003.PasswordInJson3",
            "traits": "",
            "state": "Active",
            "kind": "json",
            "properties": {
              "file": "appSettings.json|appsettings.*.json",
              "path": "pwd"
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0003",
            "id": "Security.0003.PasswordInJson4",
            "traits": "",
            "state": "Active",
            "kind": "json",
            "properties": {
              "file": "appSettings.json|appsettings.*.json",
              "path": "Pwd"
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0101",
            "id": "Security.0101.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "Microsoft.AspNetCore.Authentication.Negotiate",
                "Microsoft.AspNetCore.Authentication.Negotiate.*"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Security.0101",
            "id": "Security.0101.WebConfigAuth",
            "traits": "",
            "state": "Active",
            "kind": "xml",
            "properties": {
              "paths": [
                "authentication",
                "location/authentication",
                "system.web/authentication",
                "location/system.web/authentication"
              ],
              "attributes": {
                "mode": "Windows"
              }
            },
            "enabled": true
          },
          {
            "ruleId": "Database.0105",
            "id": "Database.0105.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "System.Data.SqlClient"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Database.0105",
            "id": "Database.0105.WebConfig",
            "traits": "",
            "state": "Active",
            "kind": "xml",
            "properties": {
              "file": "web*.config",
              "paths": [
                "connectionStrings/add",
                "entityFramework/providers/provider"
              ],
              "attributes": {
                "providerName": "System.Data.SqlClient"
              }
            },
            "enabled": true
          },
          {
            "ruleId": "Logging.0101",
            "id": "Logging.0101.Types",
            "traits": "",
            "state": "Active",
            "kind": "type",
            "properties": {
              "fullTypes": [
                "System.Diagnostics.EventLog",
                "System.Diagnostics.EventLogEntry",
                "System.Diagnostics.EventLogEntryCollection",
                "System.Diagnostics.EventLogEntryType",
                "System.Diagnostics.EventLogTraceListener",
                "System.Diagnostics.EventLogPermission",
                "System.Diagnostics.EventLogPermissionAccess",
                "System.Diagnostics.EventLogPermissionAttribute",
                "System.Diagnostics.EventLogPermissionEntry",
                "System.Diagnostics.EventLogPermissionEntryCollection",
                "System.Diagnostics.EventSourceCreationData",
                "System.Diagnostics.EventInstance",
                "System.Diagnostics.OverflowAction",
                "System.Diagnostics.EventLogInstaller"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Logging.0102",
            "id": "Logging.0102.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "Serilog",
                "Serilog.*"
              ]
            },
            "enabled": true
          },
          {
            "ruleId": "Logging.0103",
            "id": "Logging.0103.Namespace",
            "traits": "",
            "state": "Active",
            "kind": "namespace",
            "properties": {
              "namespaces": [
                "log4net",
                "log4net.*"
              ]
            },
            "enabled": true
          }
        ]
      },
      "hash": "dbb4e3e7"
    }
  },
  "analysisStartTime": "2025-07-31T13:24:09.357216Z",
  "analysisEndTime": "2025-07-31T13:24:15.2399115Z",
  "privacyMode": "Unrestricted",
  "privacyModeHelpUrl": "https://go.microsoft.com/fwlink/?linkid=2271074",
  "stats": {
    "summary": {
      "projects": 1,
      "issues": 17,
      "incidents": 198,
      "effort": 586
    },
    "charts": {
      "severity": {
        "Mandatory": 142,
        "Optional": 35,
        "Potential": 21,
        "Information": 0
      },
      "category": {
        "Scale": 1,
        "HTTP": 2,
        "Security": 39,
        "Connection": 3,
        "Cache": 1,
        "Identity": 1,
        "Database": 3,
        "Local": 7,
        "Perf": 4,
        "Queue": 137
      }
    }
  },
  "projects": [
    {
      "path": "factory-dotnetcore-copilot-code-remediation.csproj",
      "startingProject": true,
      "issues": 17,
      "storyPoints": 586,
      "ruleInstances": [
        {
          "incidentId": "7224c739-0e7f-4b6e-b4a9-ad5afa0dd154",
          "ruleId": "Scale.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "factory-dotnetcore-copilot-code-remediation.csproj",
            "snippet": "Found 35 files matching the rule:\r\n\r\nwwwroot\\css\\site.css\r\nwwwroot\\favicon.ico\r\nwwwroot\\js\\site.js\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-grid.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-grid.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-grid.rtl.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-grid.rtl.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-reboot.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-reboot.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-reboot.rtl.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-reboot.rtl.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-utilities.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-utilities.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-utilities.rtl.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap-utilities.rtl.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.rtl.css\r\nwwwroot\\lib\\bootstrap\\dist\\css\\bootstrap.rtl.min.css\r\nwwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.bundle.js\r\nwwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.bundle.min.js\r\nwwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.esm.js\r\nwwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.esm.min.js\r\nwwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.js\r\nwwwroot\\lib\\bootstrap\\dist\\js\\bootstrap.min.js\r\nwwwroot\\lib\\jquery-validation-unobtrusive\\dist\\jquery.validate.unobtrusive.js\r\nwwwroot\\lib\\jquery-validation-unobtrusive\\dist\\jquery.validate.unobtrusive.min.js\r\nwwwroot\\lib\\jquery-validation\\dist\\additional-methods.js\r\nwwwroot\\lib\\jquery-validation\\dist\\additional-methods.min.js\r\nwwwroot\\lib\\jquery-validation\\dist\\jquery.validate.js\r\nwwwroot\\lib\\jquery-validation\\dist\\jquery.validate.min.js\r\nwwwroot\\lib\\jquery\\dist\\jquery.js\r\nwwwroot\\lib\\jquery\\dist\\jquery.min.js\r\nwwwroot\\lib\\jquery\\dist\\jquery.slim.js\r\nwwwroot\\lib\\jquery\\dist\\jquery.slim.min.js\r\n"
          }
        },
        {
          "incidentId": "a1a345d2-53d0-4f5d-bbaf-9a20014e76d1",
          "ruleId": "HTTP.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "App.config",
            "snippet": "\u003CnetMsmqBinding\u003E\r\n  \u003Cbinding name=\u0022MSMQOrderProcessing\u0022 exactlyOnce=\u0022true\u0022 durable=\u0022true\u0022 receiveTimeout=\u002200:10:00\u0022 timeToLive=\u00221.00:00:00\u0022 deadLetterQueue=\u0022System\u0022 rejectAfterLastRetry=\u0022true\u0022 maxRetryCycles=\u00223\u0022 receiveRetryCount=\u00225\u0022\u003E\r\n    \u003Csecurity mode=\u0022None\u0022 /\u003E\r\n  \u003C/binding\u003E\r\n  \u003Cbinding name=\u0022MSMQPaymentProcessing\u0022 exactlyOnce=\u0022true\u0022 durable=\u0022true\u0022 receiveTimeout=\u002200:05:00\u0022 timeToLive=\u002200:30:00\u0022 deadLetterQueue=\u0022Custom\u0022 customDeadLetterQueue=\u0022.\\Private$\\PaymentDeadLetter\u0022\u003E\r\n    \u003Csecurity mode=\u0022Transport\u0022 /\u003E\r\n  \u003C/binding\u003E\r\n\u003C/netMsmqBinding\u003E"
          }
        },
        {
          "incidentId": "47f5ec12-029e-492c-beb2-56460301cb2c",
          "ruleId": "Security.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "App.config",
            "snippet": "\u003CappSettings\u003E\r\n  \u003C!-- Azure Migrate Detection - MSMQ Queue Paths --\u003E\r\n  \u003Cadd key=\u0022MSMQ.OrderProcessingQueue\u0022 value=\u0022.\\Private$\\OrderProcessing\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.PaymentProcessingQueue\u0022 value=\u0022.\\Private$\\PaymentProcessing\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.InventoryUpdatesQueue\u0022 value=\u0022.\\Private$\\InventoryUpdates\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.CustomerNotificationsQueue\u0022 value=\u0022.\\Private$\\CustomerNotifications\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.ErrorQueue\u0022 value=\u0022.\\Private$\\ErrorQueue\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.DeadLetterQueue\u0022 value=\u0022.\\Private$\\DeadLetterQueue\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.PoisonMessageQueue\u0022 value=\u0022.\\Private$\\PoisonMessages\u0022 /\u003E\r\n  \u003C!-- Azure Migrate Detection - MSMQ Configuration Settings --\u003E\r\n  \u003Cadd key=\u0022MSMQ.TransactionalQueues\u0022 value=\u0022true\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.UseDeadLetterQueue\u0022 value=\u0022true\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.UseJournalQueue\u0022 value=\u0022true\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.MessageTimeToLive\u0022 value=\u002224:00:00\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.MessageFormatter\u0022 value=\u0022System.Messaging.BinaryMessageFormatter\u0022 /\u003E\r\n  \u003Cadd key=\u0022MSMQ.DefaultPriority\u0022 value=\u0022Normal\u0022 /\u003E\r\n  \u003C!-- Azure Migrate Detection - RabbitMQ Configuration --\u003E\r\n  \u003Cadd key=\u0022RabbitMQ.ConnectionString\u0022 value=\u0022amqp://guest:guest@localhost:5672/\u0022 /\u003E\r\n  \u003Cadd key=\u0022RabbitMQ.HostName\u0022 value=\u0022localhost\u0022 /\u003E\r\n  \u003Cadd key=\u0022RabbitMQ.Port\u0022 value=\u00225672\u0022 /\u003E\r\n  \u003Cadd key=\u0022RabbitMQ.VirtualHost\u0022 value=\u0022/\u0022 /\u003E\r\n  \u003Cadd key=\u0022RabbitMQ.UserName\u0022 value=\u0022guest\u0022 /\u003E\r\n  \u003Cadd key=\u0022RabbitMQ.Password\u0022 value=\u0022guest\u0022 /\u003E\r\n  \u003C!-- Azure Migrate Detection - Message Routing Configuration --\u003E\r\n  \u003Cadd key=\u0022MessageRouting.OrdersExchange\u0022 value=\u0022orders.direct\u0022 /\u003E\r\n  \u003Cadd key=\u0022MessageRouting.PaymentExchange\u0022 value=\u0022payments.topic\u0022 /\u003E\r\n  \u003Cadd key=\u0022MessageRouting.InventoryExchange\u0022 value=\u0022inventory.fanout\u0022 /\u003E\r\n  \u003Cadd key=\u0022MessageRouting.NotificationExchange\u0022 value=\u0022notifications.headers\u0022 /\u003E\r\n\u003C/appSettings\u003E"
          }
        },
        {
          "incidentId": "d274c572-f63b-46f7-8fd7-42879d7eca9a",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "App.config",
            "snippet": "\u003Cadd key=\u0022RabbitMQ.Password\u0022 value=\u0022guest\u0022 /\u003E"
          }
        },
        {
          "incidentId": "29952cbd-6540-49d5-b8c7-6f8bc2f62fa3",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "App.config",
            "snippet": "\u003Cadd key=\u0022RabbitMQ.UserName\u0022 value=\u0022guest\u0022 /\u003E"
          }
        },
        {
          "incidentId": "a91c9451-174a-4fbf-a7d9-9115a3268b4d",
          "ruleId": "Connection.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "appsettings.json",
            "snippet": "\u0022AzureSqlConnection\u0022: \u0022Server=tcp:myserver.database.windows.net,1433;Initial Catalog=mydatabase;User ID=myuser;Password=MyHardcodedPassword123!;\u0022"
          }
        },
        {
          "incidentId": "fddbeb40-f34e-4c43-b38f-1e20453819c5",
          "ruleId": "Connection.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "appsettings.json",
            "snippet": "\u0022DefaultConnection\u0022: \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022"
          }
        },
        {
          "incidentId": "d65c88a8-86bb-42a4-aa83-4991759d580a",
          "ruleId": "Connection.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "appsettings.json",
            "snippet": "\u0022SqlServerConnection\u0022: \u0022Data Source=localhost;Initial Catalog=TestDB;User ID=sa;Password=MySecretPassword456!;\u0022"
          }
        },
        {
          "incidentId": "db179815-b300-4d1f-b79f-6e3ec2889204",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "appsettings.json",
            "snippet": "\u0022password\u0022: \u0022P@ssw0rd123!\u0022"
          }
        },
        {
          "incidentId": "52ba65a7-2944-4d74-8fd2-15cf06e1fcf3",
          "ruleId": "Cache.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Program.cs",
            "snippet": "builder.Services.AddMemoryCache();",
            "label": "Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache",
            "line": 21,
            "column": 0
          }
        },
        {
          "incidentId": "4723c1f3-c880-4520-bc70-2876ec069198",
          "ruleId": "Identity.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Program.cs",
            "snippet": "builder.Services.AddAuthentication(NegotiateDefaults.AuthenticationScheme)\r\n    .AddNegotiate();",
            "label": "Microsoft.Extensions.DependencyInjection.NegotiateExtensions.AddNegotiate",
            "line": 13,
            "column": 0
          }
        },
        {
          "incidentId": "00e64937-f37a-47f1-a75b-4f6e89f23c32",
          "ruleId": "Security.0101",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Program.cs",
            "snippet": "builder.Services.AddAuthentication(NegotiateDefaults.AuthenticationScheme)\r\n    .AddNegotiate();",
            "label": "Microsoft.AspNetCore.Authentication.Negotiate.NegotiateDefaults",
            "line": 13,
            "column": 35
          }
        },
        {
          "incidentId": "5a59f75c-da05-480e-b1f4-757656fffbe7",
          "ruleId": "Database.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd name=\u0022AzureSqlConnection\u0022 connectionString=\u0022Server=tcp:myserver.database.windows.net,1433;Initial Catalog=mydatabase;User ID=myuser;Password=MyHardcodedPassword123!;\u0022 /\u003E"
          }
        },
        {
          "incidentId": "e44b22fa-eef5-484c-8be2-dc115dcc4e24",
          "ruleId": "Database.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd name=\u0022DefaultConnection\u0022 connectionString=\u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022 /\u003E"
          }
        },
        {
          "incidentId": "6d2a571c-8e4f-475e-afd9-dcc489706bf5",
          "ruleId": "Database.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd name=\u0022SqlServerConnection\u0022 connectionString=\u0022Data Source=localhost;Initial Catalog=TestDB;User ID=sa;Password=MySecretPassword456!;\u0022 /\u003E"
          }
        },
        {
          "incidentId": "9a60b97d-b47f-4f5f-8710-b2e40f96c598",
          "ruleId": "Security.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003CappSettings\u003E\r\n  \u003Cadd key=\u0022GoogleApiKey\u0022 value=\u0022AIzaSyABC123DEF456GHI789JKL012MNO345PQR678\u0022 /\u003E\r\n  \u003Cadd key=\u0022SendGridApiKey\u0022 value=\u0022SG.1234567890abcdef.ghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz\u0022 /\u003E\r\n  \u003Cadd key=\u0022TwitterApiKey\u0022 value=\u0022twitter_api_key_1234567890abcdefghijklmnop\u0022 /\u003E\r\n  \u003Cadd key=\u0022StripeSecretKey\u0022 value=\u0022sk_live_51234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\u0022 /\u003E\r\n  \u003Cadd key=\u0022JwtSecretKey\u0022 value=\u0022MyJwtSecretKey12345678901234567890SuperSecretSigningKey\u0022 /\u003E\r\n  \u003Cadd key=\u0022EncryptionKey\u0022 value=\u0022MyEncryptionKey123456789012345678901234567890\u0022 /\u003E\r\n  \u003Cadd key=\u0022DatabasePassword\u0022 value=\u0022DatabaseSecretPassword789!\u0022 /\u003E\r\n  \u003Cadd key=\u0022ApiSecret\u0022 value=\u0022MyApiSecret123456789\u0022 /\u003E\r\n  \u003Cadd key=\u0022AzureStorageConnectionString\u0022 value=\u0022DefaultEndpointsProtocol=https;AccountName=mystorageaccount;AccountKey=abc123def456ghi789jklmnop\u002BABCDEFG==;EndpointSuffix=core.windows.net\u0022 /\u003E\r\n  \u003Cadd key=\u0022ServiceBusConnectionString\u0022 value=\u0022Endpoint=sb://mynamespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=mySecretKey123456789=\u0022 /\u003E\r\n  \u003Cadd key=\u0022AzureClientSecret\u0022 value=\u0022MyAzureClientSecret123!\u0022 /\u003E\r\n  \u003Cadd key=\u0022AwsAccessKey\u0022 value=\u0022AKIAIOSFODNN7EXAMPLE\u0022 /\u003E\r\n  \u003Cadd key=\u0022AwsSecretKey\u0022 value=\u0022wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\u0022 /\u003E\r\n  \u003Cadd key=\u0022password\u0022 value=\u0022P@ssw0rd123!\u0022 /\u003E\r\n  \u003Cadd key=\u0022apikey\u0022 value=\u0022sk-abc123-HARDCODED-SECRET-KEY\u0022 /\u003E\r\n  \u003Cadd key=\u0022secret\u0022 value=\u0022MySecretKey456789\u0022 /\u003E\r\n  \u003Cadd key=\u0022token\u0022 value=\u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022 /\u003E\r\n  \u003Cadd key=\u0022key\u0022 value=\u0022AKIAIOSFODNN7EXAMPLE\u0022 /\u003E\r\n\u003C/appSettings\u003E"
          }
        },
        {
          "incidentId": "426c2072-be01-4baa-9775-0e2abd6f52b6",
          "ruleId": "Security.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003CconnectionStrings\u003E\r\n  \u003Cadd name=\u0022DefaultConnection\u0022 connectionString=\u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022 /\u003E\r\n  \u003Cadd name=\u0022AzureSqlConnection\u0022 connectionString=\u0022Server=tcp:myserver.database.windows.net,1433;Initial Catalog=mydatabase;User ID=myuser;Password=MyHardcodedPassword123!;\u0022 /\u003E\r\n  \u003Cadd name=\u0022SqlServerConnection\u0022 connectionString=\u0022Data Source=localhost;Initial Catalog=TestDB;User ID=sa;Password=MySecretPassword456!;\u0022 /\u003E\r\n\u003C/connectionStrings\u003E"
          }
        },
        {
          "incidentId": "83c5ac00-4c7d-4dd6-b51e-367dc9cf2a8e",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022ApiSecret\u0022 value=\u0022MyApiSecret123456789\u0022 /\u003E"
          }
        },
        {
          "incidentId": "8ef75139-63ca-4720-a085-476703b6810b",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022AwsSecretKey\u0022 value=\u0022wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\u0022 /\u003E"
          }
        },
        {
          "incidentId": "fbff8b1c-4b31-4546-9cae-395b20c6bb9e",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022AzureClientSecret\u0022 value=\u0022MyAzureClientSecret123!\u0022 /\u003E"
          }
        },
        {
          "incidentId": "4586c4b5-923d-4ea0-a16e-357891876cc0",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022DatabasePassword\u0022 value=\u0022DatabaseSecretPassword789!\u0022 /\u003E"
          }
        },
        {
          "incidentId": "2db332e1-6596-41a0-b7fa-bfb6476ae615",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022JwtSecretKey\u0022 value=\u0022MyJwtSecretKey12345678901234567890SuperSecretSigningKey\u0022 /\u003E"
          }
        },
        {
          "incidentId": "42792df9-3d70-4f7e-a5aa-a47ba34db652",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022password\u0022 value=\u0022P@ssw0rd123!\u0022 /\u003E"
          }
        },
        {
          "incidentId": "dc587704-6a72-4b8f-b03e-ddb158c08aca",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022secret\u0022 value=\u0022MySecretKey456789\u0022 /\u003E"
          }
        },
        {
          "incidentId": "e435887d-bbf5-48a0-995b-999f7d9347eb",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022StripeSecretKey\u0022 value=\u0022sk_live_51234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\u0022 /\u003E"
          }
        },
        {
          "incidentId": "0ac09821-cbac-4b36-88b5-f9a6f6b59d8d",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "web.config",
            "snippet": "\u003Cadd key=\u0022token\u0022 value=\u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022 /\u003E"
          }
        },
        {
          "incidentId": "c9302db3-0277-4abf-806b-1922cb1b4fd6",
          "ruleId": "HTTP.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using var client = new HttpClient();",
            "label": "System.Net.Http.HttpClient",
            "line": 129,
            "column": 31
          }
        },
        {
          "incidentId": "8a4a0add-9e6e-431e-b84d-a577ac132110",
          "ruleId": "Local.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using var registryKey = Registry.CurrentUser.CreateSubKey(@\u0022SOFTWARE\\MigrateTestApp\u0022);",
            "label": "Microsoft.Win32.RegistryKey",
            "line": 51,
            "column": 22
          }
        },
        {
          "incidentId": "b694c8b1-5a99-4903-ae48-689f8be2ee27",
          "ruleId": "Local.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using var registryKey = Registry.CurrentUser.CreateSubKey(@\u0022SOFTWARE\\MigrateTestApp\u0022);",
            "label": "Microsoft.Win32.Registry",
            "line": 51,
            "column": 40
          }
        },
        {
          "incidentId": "b1d09521-352f-4a43-a611-3e7d2d9b6ea4",
          "ruleId": "Local.0002",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string localPath = \u0022C:\\\\Temp\\\\legacy.txt\u0022;",
            "label": "^[a-zA-Z]:[\\\\/]",
            "line": 35,
            "column": 31
          }
        },
        {
          "incidentId": "62191e2a-bd2d-4bdb-9041-28536708c7ac",
          "ruleId": "Local.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "fileInfo = $\u0022File content: {System.IO.File.ReadAllText(localPath)}\u0022;",
            "label": "System.IO.File",
            "line": 40,
            "column": 50
          }
        },
        {
          "incidentId": "e7077957-8b11-4925-b4c8-4c8891eb1372",
          "ruleId": "Local.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "if (!System.IO.File.Exists(localPath))\r\n            {\r\n                System.IO.File.WriteAllText(localPath, \u0022Legacy local file.\u0022);\r\n            }",
            "label": "System.IO.File",
            "line": 36,
            "column": 27
          }
        },
        {
          "incidentId": "8ea9fa26-63c8-4f2d-813e-65cf98a831c1",
          "ruleId": "Local.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "System.IO.File.WriteAllText(localPath, \u0022Legacy local file.\u0022);",
            "label": "System.IO.File",
            "line": 38,
            "column": 26
          }
        },
        {
          "incidentId": "5337f3ad-093e-4d9c-bb6e-e69834a4cf08",
          "ruleId": "Local.0006",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var uri = new Uri(\u0022https://api.example.com/data\u0022);",
            "label": "https://",
            "line": 145,
            "column": 26
          }
        },
        {
          "incidentId": "06333561-4828-4fff-bb73-66df43bf3411",
          "ruleId": "Perf.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "fileInfo = $\u0022File content: {System.IO.File.ReadAllText(localPath)}\u0022;",
            "label": "System.IO.File.ReadAllText",
            "line": 40,
            "column": 40
          }
        },
        {
          "incidentId": "34da0dc5-aaf3-4d2c-aa8d-9a6282ddb0ea",
          "ruleId": "Perf.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "System.IO.File.WriteAllText(localPath, \u0022Legacy local file.\u0022);",
            "label": "System.IO.File.WriteAllText",
            "line": 38,
            "column": 16
          }
        },
        {
          "incidentId": "70bb8c67-c47c-457c-b229-74316e7b44c5",
          "ruleId": "Perf.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var result = command.ExecuteScalar();",
            "label": "Microsoft.Data.SqlClient.SqlCommand.ExecuteScalar",
            "line": 160,
            "column": 21
          }
        },
        {
          "incidentId": "b5d4f32f-0e34-4526-a4be-3d29886d6450",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "if (!MessageQueue.Exists(msmqPath))\r\n            {\r\n                MessageQueue.Create(msmqPath, true);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 90,
            "column": 17
          }
        },
        {
          "incidentId": "721b5eeb-05e0-4277-a5dc-166dfa9c1020",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "if (!MessageQueue.Exists(queuePath))\r\n            {\r\n                MessageQueue.Create(queuePath, true);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 218,
            "column": 17
          }
        },
        {
          "incidentId": "afeb0e97-fff0-470f-9ece-715812611337",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "if (!MessageQueue.Exists(queuePath))\r\n            {\r\n                MessageQueue.Create(queuePath, true);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 303,
            "column": 17
          }
        },
        {
          "incidentId": "e2cd3a4f-95e9-4d2f-ba08-738ea8c491eb",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "if (MessageQueue.Exists(queuePath))\r\n            {\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    \r\n                    try\r\n                    {\r\n                        var message = queue.Receive(TimeSpan.FromSeconds(5));\r\n                        ViewBag.Message = $\u0022Direct MSMQ message received: ID={message.Id}, Priority={message.Priority}\u0022;\r\n                    }\r\n                    catch (MessageQueueException mqEx) when (mqEx.Message.Contains(\u0022timeout\u0022))\r\n                    {\r\n                        ViewBag.Message = \u0022No MSMQ messages available (timeout)\u0022;\r\n                    }\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 266,
            "column": 16
          }
        },
        {
          "incidentId": "bbbc28a8-109e-4c55-839c-eb8e24a35a66",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "if (MessageQueue.Exists(queuePath))\r\n            {\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(1)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messageList.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Label = message.Label,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 363,
            "column": 16
          }
        },
        {
          "incidentId": "c240f79c-4553-4306-ad82-3013cd59081b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "message.Priority = MessagePriority.High;",
            "label": "System.Messaging.MessagePriority",
            "line": 238,
            "column": 35
          }
        },
        {
          "incidentId": "6f100a04-409f-41ed-9b76-d29f8fbe83c9",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "message1.Priority = MessagePriority.High;",
            "label": "System.Messaging.MessagePriority",
            "line": 324,
            "column": 40
          }
        },
        {
          "incidentId": "7778866e-0784-4090-ac29-fefab66e5333",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "message2.Priority = MessagePriority.Normal;",
            "label": "System.Messaging.MessagePriority",
            "line": 328,
            "column": 40
          }
        },
        {
          "incidentId": "80c3cd4a-6a53-42e9-a3ce-c9fac7a37447",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "MessageQueue.Create(msmqPath, true);",
            "label": "System.Messaging.MessageQueue",
            "line": 92,
            "column": 16
          }
        },
        {
          "incidentId": "529fb8a4-7a12-41f7-8d9f-03ab03467fee",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "MessageQueue.Create(queuePath, true);",
            "label": "System.Messaging.MessageQueue",
            "line": 220,
            "column": 16
          }
        },
        {
          "incidentId": "1af32bab-6b7f-433d-ac05-807d3dae906a",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "MessageQueue.Create(queuePath, true);",
            "label": "System.Messaging.MessageQueue",
            "line": 305,
            "column": 16
          }
        },
        {
          "incidentId": "1d347766-e5c4-40e6-8e6a-9cddb8efe5b2",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "msmqMessage.Priority = MessagePriority.Normal;",
            "label": "System.Messaging.MessagePriority",
            "line": 98,
            "column": 35
          }
        },
        {
          "incidentId": "70d28d70-c373-44d0-a286-8f562d58977e",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "queue.Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 270,
            "column": 42
          }
        },
        {
          "incidentId": "fb398b5c-2035-4c0f-9b8b-3fd145b8a3ae",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "queue.Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 367,
            "column": 42
          }
        },
        {
          "incidentId": "76a4eae8-a5ff-4f37-9e12-900286f8f84d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "try\r\n                    {\r\n                        var message = queue.Receive(TimeSpan.FromSeconds(5));\r\n                        ViewBag.Message = $\u0022Direct MSMQ message received: ID={message.Id}, Priority={message.Priority}\u0022;\r\n                    }\r\n                    catch (MessageQueueException mqEx) when (mqEx.Message.Contains(\u0022timeout\u0022))\r\n                    {\r\n                        ViewBag.Message = \u0022No MSMQ messages available (timeout)\u0022;\r\n                    }",
            "label": "System.Messaging.MessageQueueException",
            "line": 277,
            "column": 27
          }
        },
        {
          "incidentId": "3f8f384d-01a4-459d-8ab1-f9df41f4b7c9",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "try\r\n        {\r\n            // Azure Migrate Detection - Direct System.Messaging usage\r\n            string queuePath = @\u0022.\\Private$\\DirectOrderQueue\u0022;\r\n            \r\n            if (!MessageQueue.Exists(queuePath))\r\n            {\r\n                MessageQueue.Create(queuePath, true);\r\n            }\r\n\r\n            using (var queue = new MessageQueue(queuePath))\r\n            {\r\n                queue.Label = \u0022Direct Order Queue\u0022;\r\n                queue.DefaultPropertiesToSend.Recoverable = true;\r\n                queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n\r\n                var orderData = new\r\n                {\r\n                    OrderId = 12345,\r\n                    CustomerId = \u0022CUST-001\u0022,\r\n                    Amount = 299.99m,\r\n                    Timestamp = DateTime.UtcNow\r\n                };\r\n\r\n                var message = new Message(orderData, new BinaryMessageFormatter());\r\n                message.Priority = MessagePriority.High;\r\n                message.UseDeadLetterQueue = true;\r\n                message.UseJournalQueue = true;\r\n                message.TimeToBeReceived = TimeSpan.FromHours(24);\r\n\r\n                queue.Send(message, \u0022Direct Order Message\u0022);\r\n            }\r\n\r\n            // Also use service layer\r\n            _msmqService.SendOrderToMSMQ(new { OrderId = 12346 }, \u0022High\u0022);\r\n            \r\n            ViewBag.Message = \u0022MSMQ message sent successfully - System.Messaging.MessageQueue usage detected\u0022;\r\n        }\r\n        catch (MessageQueueException ex)\r\n        {\r\n            ViewBag.Message = $\u0022MSMQ Error: {ex.Message}\u0022;\r\n            _logger.LogError(ex, \u0022MSMQ Send Error\u0022);\r\n        }",
            "label": "System.Messaging.MessageQueueException",
            "line": 251,
            "column": 15
          }
        },
        {
          "incidentId": "4b026b38-c2e9-402b-8f83-d3c244e63110",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "try\r\n        {\r\n            string msmqPath = @\u0022.\\Private$\\WebAppQueue\u0022;\r\n            if (!MessageQueue.Exists(msmqPath))\r\n            {\r\n                MessageQueue.Create(msmqPath, true);\r\n            }\r\n\r\n            using var msmqQueue = new MessageQueue(msmqPath);\r\n            msmqQueue.Label = \u0022Web Application Queue\u0022;\r\n            var msmqMessage = new Message(\u0022Web app initialized\u0022, new BinaryMessageFormatter());\r\n            msmqMessage.Priority = MessagePriority.Normal;\r\n            msmqQueue.Send(msmqMessage, \u0022Initialization Message\u0022);\r\n\r\n            _msmqService.InitializeMSMQQueues();\r\n            _rabbitMQService.InitializeRabbitMQConnection();\r\n            \r\n            _logger.LogInformation(\u0022Direct MSMQ usage in controller - MessageQueue.Create and Send operations\u0022);\r\n        }\r\n        catch (MessageQueueException ex)\r\n        {\r\n            _logger.LogError(ex, \u0022MSMQ initialization error in controller\u0022);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            _logger.LogError(ex, \u0022Messaging service initialization error\u0022);\r\n        }",
            "label": "System.Messaging.MessageQueueException",
            "line": 106,
            "column": 15
          }
        },
        {
          "incidentId": "6ef5d295-e94b-45eb-9651-2d8170a518da",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "try\r\n        {\r\n            string queuePath = @\u0022.\\Private$\\DirectOrderQueue\u0022;\r\n            \r\n            if (MessageQueue.Exists(queuePath))\r\n            {\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    \r\n                    try\r\n                    {\r\n                        var message = queue.Receive(TimeSpan.FromSeconds(5));\r\n                        ViewBag.Message = $\u0022Direct MSMQ message received: ID={message.Id}, Priority={message.Priority}\u0022;\r\n                    }\r\n                    catch (MessageQueueException mqEx) when (mqEx.Message.Contains(\u0022timeout\u0022))\r\n                    {\r\n                        ViewBag.Message = \u0022No MSMQ messages available (timeout)\u0022;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Also use service layer\r\n            var receivedOrder = _msmqService.ReceiveOrderFromMSMQ();\r\n            _logger.LogInformation(\u0022MSMQ message received via service: {Order}\u0022, receivedOrder);\r\n        }\r\n        catch (MessageQueueException ex)\r\n        {\r\n            ViewBag.Message = $\u0022MSMQ Receive Error: {ex.Message}\u0022;\r\n            _logger.LogError(ex, \u0022MSMQ Receive Exception\u0022);\r\n        }",
            "label": "System.Messaging.MessageQueueException",
            "line": 288,
            "column": 15
          }
        },
        {
          "incidentId": "430718d8-93e9-407b-8ca8-0de938b33c69",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "try\r\n        {\r\n            string queuePath = @\u0022.\\Private$\\DirectOrderQueue\u0022;\r\n            var messageList = new List\u003Cobject\u003E();\r\n            \r\n            if (MessageQueue.Exists(queuePath))\r\n            {\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(1)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messageList.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Label = message.Label,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Also use service layer\r\n            var serviceMessages = _msmqService.GetMSMQQueueContents(@\u0022.\\Private$\\OrderProcessing\u0022);\r\n            \r\n            ViewBag.Message = $\u0022Direct MSMQ browsing: {messageList.Count} messages, Service: {serviceMessages.Count} messages\u0022;\r\n            ViewBag.Messages = messageList;\r\n            ViewBag.ServiceMessages = serviceMessages;\r\n        }\r\n        catch (MessageQueueException ex)\r\n        {\r\n            ViewBag.Message = $\u0022MSMQ Browse Error: {ex.Message}\u0022;\r\n            _logger.LogError(ex, \u0022MSMQ Browse Error\u0022);\r\n        }",
            "label": "System.Messaging.MessageQueueException",
            "line": 392,
            "column": 15
          }
        },
        {
          "incidentId": "a2e5e519-7669-4314-83c1-3f0d2a4ae3cc",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "try\r\n        {\r\n            string queuePath = @\u0022.\\Private$\\DirectTransactionalQueue\u0022;\r\n            \r\n            if (!MessageQueue.Exists(queuePath))\r\n            {\r\n                MessageQueue.Create(queuePath, true);\r\n            }\r\n\r\n            using (var queue = new MessageQueue(queuePath))\r\n            using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderData = new\r\n                    {\r\n                        OrderId = 67890,\r\n                        CustomerId = \u0022CUST-002\u0022,\r\n                        Amount = 599.99m,\r\n                        RequiresTransaction = true\r\n                    };\r\n\r\n                    var message1 = new Message(orderData, new BinaryMessageFormatter());\r\n                    message1.Priority = MessagePriority.High;\r\n                    message1.Recoverable = true;\r\n                    \r\n                    var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());\r\n                    message2.Priority = MessagePriority.Normal;\r\n                    \r\n                    queue.Send(message1, \u0022Transactional Order\u0022, transaction);\r\n                    queue.Send(message2, \u0022Order Confirmation\u0022, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    \r\n                    ViewBag.Message = \u0022Direct MSMQ transactional processing completed - MessageQueueTransaction detected\u0022;\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    throw;\r\n                }\r\n            }\r\n\r\n            // Also use service layer\r\n            _msmqService.ProcessOrderWithMSMQTransaction(new { OrderId = 67891 });\r\n        }\r\n        catch (MessageQueueException ex)\r\n        {\r\n            ViewBag.Message = $\u0022MSMQ Transaction Error: {ex.Message}\u0022;\r\n            _logger.LogError(ex, \u0022MSMQ Transaction Error\u0022);\r\n        }",
            "label": "System.Messaging.MessageQueueException",
            "line": 347,
            "column": 15
          }
        },
        {
          "incidentId": "dbd7022e-46dc-49fe-a1e6-d6c9bbe307ae",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    \r\n                    try\r\n                    {\r\n                        var message = queue.Receive(TimeSpan.FromSeconds(5));\r\n                        ViewBag.Message = $\u0022Direct MSMQ message received: ID={message.Id}, Priority={message.Priority}\u0022;\r\n                    }\r\n                    catch (MessageQueueException mqEx) when (mqEx.Message.Contains(\u0022timeout\u0022))\r\n                    {\r\n                        ViewBag.Message = \u0022No MSMQ messages available (timeout)\u0022;\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 268,
            "column": 23
          }
        },
        {
          "incidentId": "c8ae1be8-e926-4638-864d-8449d5a653c9",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    \r\n                    try\r\n                    {\r\n                        var message = queue.Receive(TimeSpan.FromSeconds(5));\r\n                        ViewBag.Message = $\u0022Direct MSMQ message received: ID={message.Id}, Priority={message.Priority}\u0022;\r\n                    }\r\n                    catch (MessageQueueException mqEx) when (mqEx.Message.Contains(\u0022timeout\u0022))\r\n                    {\r\n                        ViewBag.Message = \u0022No MSMQ messages available (timeout)\u0022;\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 268,
            "column": 39
          }
        },
        {
          "incidentId": "27e3bd4b-8579-4609-8c4f-07cf729a871d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(1)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messageList.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Label = message.Label,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 365,
            "column": 23
          }
        },
        {
          "incidentId": "0434c375-cf89-4079-baa2-6b5ecee93e7e",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(1)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messageList.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Label = message.Label,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 365,
            "column": 39
          }
        },
        {
          "incidentId": "1d96d1a1-bcc5-4e7e-8dca-d856735854b1",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n            {\r\n                queue.Label = \u0022Direct Order Queue\u0022;\r\n                queue.DefaultPropertiesToSend.Recoverable = true;\r\n                queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n\r\n                var orderData = new\r\n                {\r\n                    OrderId = 12345,\r\n                    CustomerId = \u0022CUST-001\u0022,\r\n                    Amount = 299.99m,\r\n                    Timestamp = DateTime.UtcNow\r\n                };\r\n\r\n                var message = new Message(orderData, new BinaryMessageFormatter());\r\n                message.Priority = MessagePriority.High;\r\n                message.UseDeadLetterQueue = true;\r\n                message.UseJournalQueue = true;\r\n                message.TimeToBeReceived = TimeSpan.FromHours(24);\r\n\r\n                queue.Send(message, \u0022Direct Order Message\u0022);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 223,
            "column": 19
          }
        },
        {
          "incidentId": "15ad4b27-8031-4483-984c-fab9b871d46c",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n            {\r\n                queue.Label = \u0022Direct Order Queue\u0022;\r\n                queue.DefaultPropertiesToSend.Recoverable = true;\r\n                queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n\r\n                var orderData = new\r\n                {\r\n                    OrderId = 12345,\r\n                    CustomerId = \u0022CUST-001\u0022,\r\n                    Amount = 299.99m,\r\n                    Timestamp = DateTime.UtcNow\r\n                };\r\n\r\n                var message = new Message(orderData, new BinaryMessageFormatter());\r\n                message.Priority = MessagePriority.High;\r\n                message.UseDeadLetterQueue = true;\r\n                message.UseJournalQueue = true;\r\n                message.TimeToBeReceived = TimeSpan.FromHours(24);\r\n\r\n                queue.Send(message, \u0022Direct Order Message\u0022);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 223,
            "column": 35
          }
        },
        {
          "incidentId": "9cafbe89-acba-4108-b3c2-142f61d9dd0d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n            using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderData = new\r\n                    {\r\n                        OrderId = 67890,\r\n                        CustomerId = \u0022CUST-002\u0022,\r\n                        Amount = 599.99m,\r\n                        RequiresTransaction = true\r\n                    };\r\n\r\n                    var message1 = new Message(orderData, new BinaryMessageFormatter());\r\n                    message1.Priority = MessagePriority.High;\r\n                    message1.Recoverable = true;\r\n                    \r\n                    var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());\r\n                    message2.Priority = MessagePriority.Normal;\r\n                    \r\n                    queue.Send(message1, \u0022Transactional Order\u0022, transaction);\r\n                    queue.Send(message2, \u0022Order Confirmation\u0022, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    \r\n                    ViewBag.Message = \u0022Direct MSMQ transactional processing completed - MessageQueueTransaction detected\u0022;\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 308,
            "column": 19
          }
        },
        {
          "incidentId": "cba31465-9e28-4a32-b960-a22bfa0f5e84",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n            using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderData = new\r\n                    {\r\n                        OrderId = 67890,\r\n                        CustomerId = \u0022CUST-002\u0022,\r\n                        Amount = 599.99m,\r\n                        RequiresTransaction = true\r\n                    };\r\n\r\n                    var message1 = new Message(orderData, new BinaryMessageFormatter());\r\n                    message1.Priority = MessagePriority.High;\r\n                    message1.Recoverable = true;\r\n                    \r\n                    var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());\r\n                    message2.Priority = MessagePriority.Normal;\r\n                    \r\n                    queue.Send(message1, \u0022Transactional Order\u0022, transaction);\r\n                    queue.Send(message2, \u0022Order Confirmation\u0022, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    \r\n                    ViewBag.Message = \u0022Direct MSMQ transactional processing completed - MessageQueueTransaction detected\u0022;\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 308,
            "column": 35
          }
        },
        {
          "incidentId": "580a8e5e-9e8e-4142-92ff-02340817117a",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderData = new\r\n                    {\r\n                        OrderId = 67890,\r\n                        CustomerId = \u0022CUST-002\u0022,\r\n                        Amount = 599.99m,\r\n                        RequiresTransaction = true\r\n                    };\r\n\r\n                    var message1 = new Message(orderData, new BinaryMessageFormatter());\r\n                    message1.Priority = MessagePriority.High;\r\n                    message1.Recoverable = true;\r\n                    \r\n                    var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());\r\n                    message2.Priority = MessagePriority.Normal;\r\n                    \r\n                    queue.Send(message1, \u0022Transactional Order\u0022, transaction);\r\n                    queue.Send(message2, \u0022Order Confirmation\u0022, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    \r\n                    ViewBag.Message = \u0022Direct MSMQ transactional processing completed - MessageQueueTransaction detected\u0022;\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 309,
            "column": 19
          }
        },
        {
          "incidentId": "61cd1edf-cc0c-4fca-a276-f4ad1929d6a9",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderData = new\r\n                    {\r\n                        OrderId = 67890,\r\n                        CustomerId = \u0022CUST-002\u0022,\r\n                        Amount = 599.99m,\r\n                        RequiresTransaction = true\r\n                    };\r\n\r\n                    var message1 = new Message(orderData, new BinaryMessageFormatter());\r\n                    message1.Priority = MessagePriority.High;\r\n                    message1.Recoverable = true;\r\n                    \r\n                    var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());\r\n                    message2.Priority = MessagePriority.Normal;\r\n                    \r\n                    queue.Send(message1, \u0022Transactional Order\u0022, transaction);\r\n                    queue.Send(message2, \u0022Order Confirmation\u0022, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    \r\n                    ViewBag.Message = \u0022Direct MSMQ transactional processing completed - MessageQueueTransaction detected\u0022;\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 309,
            "column": 41
          }
        },
        {
          "incidentId": "e596b7a5-5dfe-4db3-bd29-ada1d72fe6b4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using var msmqQueue = new MessageQueue(msmqPath);",
            "label": "System.Messaging.MessageQueue",
            "line": 95,
            "column": 18
          }
        },
        {
          "incidentId": "19c80e22-ed34-4342-9dbb-d548999dd6bb",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "using var msmqQueue = new MessageQueue(msmqPath);",
            "label": "System.Messaging.MessageQueue",
            "line": 95,
            "column": 38
          }
        },
        {
          "incidentId": "c4c7b317-f5e2-4dd2-a498-da9faadb819d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var enumerator = queue.GetMessageEnumerator();",
            "label": "System.Messaging.MessageEnumerator",
            "line": 368,
            "column": 20
          }
        },
        {
          "incidentId": "d3ec4257-238f-4801-abcb-6345636a2c07",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message = enumerator.Current;",
            "label": "System.Messaging.Message",
            "line": 372,
            "column": 24
          }
        },
        {
          "incidentId": "9d6a8e1b-d005-4bc4-a630-60302839cd56",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 237,
            "column": 16
          }
        },
        {
          "incidentId": "c1b7bb1c-9d12-4a64-b7ed-c941ccc27f1f",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 237,
            "column": 34
          }
        },
        {
          "incidentId": "52265692-e68f-4e25-acd1-3f85e3f8637d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 237,
            "column": 57
          }
        },
        {
          "incidentId": "3eca426e-3c47-40a4-8d49-50657b01fdbf",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message = queue.Receive(TimeSpan.FromSeconds(5));",
            "label": "System.Messaging.Message",
            "line": 274,
            "column": 24
          }
        },
        {
          "incidentId": "22e31b88-b264-4043-8f4a-0ecd57552269",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message1 = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 323,
            "column": 20
          }
        },
        {
          "incidentId": "3710150d-3ed4-4cdb-b743-1e46c36798c2",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message1 = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 323,
            "column": 39
          }
        },
        {
          "incidentId": "d07e0eef-dfac-4134-9ad4-4a5cc6dd53c3",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message1 = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 323,
            "column": 62
          }
        },
        {
          "incidentId": "8a5857fc-44f9-45cb-b595-5fe8c3502158",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 327,
            "column": 20
          }
        },
        {
          "incidentId": "7a1c369c-b51b-45ee-9269-27257385ab81",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 327,
            "column": 39
          }
        },
        {
          "incidentId": "abfcd465-0d9c-4b5c-96e8-c8c75286af93",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var message2 = new Message(\u0022Order confirmation\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 327,
            "column": 73
          }
        },
        {
          "incidentId": "fb1a4eaf-38e9-4c4c-bc37-f87894a37f57",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var msmqMessage = new Message(\u0022Web app initialized\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 97,
            "column": 12
          }
        },
        {
          "incidentId": "894e766d-4564-457b-8ec1-eed8b20dbc0a",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var msmqMessage = new Message(\u0022Web app initialized\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 97,
            "column": 34
          }
        },
        {
          "incidentId": "2ba86b76-f9d1-4de6-b89e-d6b736dbe8af",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var msmqMessage = new Message(\u0022Web app initialized\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 97,
            "column": 69
          }
        },
        {
          "incidentId": "6a079fa0-47cd-493a-8171-6119974d534b",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "client.DefaultRequestHeaders.Add(\u0022X-Secret\u0022, secret);",
            "label": "secret",
            "line": 143,
            "column": 41
          }
        },
        {
          "incidentId": "43acaf0e-fe01-4c70-9d0a-34b569e5c492",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string apikey = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022;",
            "label": "secret",
            "line": 136,
            "column": 24
          }
        },
        {
          "incidentId": "c70d2acf-330f-41e4-af71-4001a8f77021",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string apikey = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022;",
            "label": "secret",
            "line": 82,
            "column": 24
          }
        },
        {
          "incidentId": "1b592e2a-28ce-4845-9324-eec97ae06734",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string connectionString = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022;",
            "label": "password",
            "line": 154,
            "column": 34
          }
        },
        {
          "incidentId": "93ebfdb0-146a-4306-ba61-18d8e4ba5a16",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string connectionString = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022;",
            "label": "password",
            "line": 78,
            "column": 34
          }
        },
        {
          "incidentId": "2cef56e1-4c4a-481d-9b62-5b480403ae48",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string secret = \u0022MySecretKey456789\u0022;",
            "label": "secret",
            "line": 137,
            "column": 24
          }
        },
        {
          "incidentId": "4f0d3c44-92b7-4b5d-ac0f-5d1ef03be4e6",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "string secret = \u0022MySecretKey456789\u0022;",
            "label": "secret",
            "line": 83,
            "column": 24
          }
        },
        {
          "incidentId": "6902d3ac-48a4-4e7f-9f38-823c3666f6da",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var config = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            [\u0022ConnectionString\u0022] = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022,\r\n            [\u0022ApiKey\u0022] = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022,\r\n            [\u0022Secret\u0022] = \u0022MySecretKey456789\u0022,\r\n            [\u0022Password\u0022] = \u0022P@ssw0rd123!\u0022,\r\n            [\u0022Token\u0022] = \u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022,\r\n            [\u0022Key\u0022] = \u0022AKIAIOSFODNN7EXAMPLE\u0022\r\n        };",
            "label": "password",
            "line": 187,
            "column": 35
          }
        },
        {
          "incidentId": "3d367a72-bb6a-48a1-a223-17ecdc91fd08",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var config = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            [\u0022ConnectionString\u0022] = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022,\r\n            [\u0022ApiKey\u0022] = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022,\r\n            [\u0022Secret\u0022] = \u0022MySecretKey456789\u0022,\r\n            [\u0022Password\u0022] = \u0022P@ssw0rd123!\u0022,\r\n            [\u0022Token\u0022] = \u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022,\r\n            [\u0022Key\u0022] = \u0022AKIAIOSFODNN7EXAMPLE\u0022\r\n        };",
            "label": "secret",
            "line": 188,
            "column": 25
          }
        },
        {
          "incidentId": "c63a4ef1-6dd0-45ea-9ca8-cf5b104949f0",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var config = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            [\u0022ConnectionString\u0022] = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022,\r\n            [\u0022ApiKey\u0022] = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022,\r\n            [\u0022Secret\u0022] = \u0022MySecretKey456789\u0022,\r\n            [\u0022Password\u0022] = \u0022P@ssw0rd123!\u0022,\r\n            [\u0022Token\u0022] = \u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022,\r\n            [\u0022Key\u0022] = \u0022AKIAIOSFODNN7EXAMPLE\u0022\r\n        };",
            "label": "secret",
            "line": 189,
            "column": 13
          }
        },
        {
          "incidentId": "5b20e025-fadb-488a-9cbf-c10699362862",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var config = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            [\u0022ConnectionString\u0022] = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022,\r\n            [\u0022ApiKey\u0022] = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022,\r\n            [\u0022Secret\u0022] = \u0022MySecretKey456789\u0022,\r\n            [\u0022Password\u0022] = \u0022P@ssw0rd123!\u0022,\r\n            [\u0022Token\u0022] = \u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022,\r\n            [\u0022Key\u0022] = \u0022AKIAIOSFODNN7EXAMPLE\u0022\r\n        };",
            "label": "secret",
            "line": 189,
            "column": 25
          }
        },
        {
          "incidentId": "2c0d2e86-43ae-4ae5-a070-859f08f677d8",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var config = new Dictionary\u003Cstring, string\u003E\r\n        {\r\n            [\u0022ConnectionString\u0022] = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022,\r\n            [\u0022ApiKey\u0022] = \u0022sk-abc123-HARDCODED-SECRET-KEY\u0022,\r\n            [\u0022Secret\u0022] = \u0022MySecretKey456789\u0022,\r\n            [\u0022Password\u0022] = \u0022P@ssw0rd123!\u0022,\r\n            [\u0022Token\u0022] = \u0022eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.hardcoded.token\u0022,\r\n            [\u0022Key\u0022] = \u0022AKIAIOSFODNN7EXAMPLE\u0022\r\n        };",
            "label": "password",
            "line": 190,
            "column": 13
          }
        },
        {
          "incidentId": "e75ac62b-81b8-4de1-a318-1408be7011ba",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential2 = new NetworkCredential(\u0022user\u0022, \u0022SecretPassword456!\u0022, \u0022domain\u0022);",
            "label": "password",
            "line": 171,
            "column": 56
          }
        },
        {
          "incidentId": "d7ede99e-5364-47d1-82ba-4d65afda22ec",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "ViewBag.Message = \u0022Configuration loaded with hardcoded secrets\u0022;",
            "label": "secret",
            "line": 195,
            "column": 26
          }
        },
        {
          "incidentId": "02eba748-667e-46ae-b592-8402bb6a634a",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential = new NetworkCredential(\u0022admin\u0022, \u0022P@ssw0rd123!\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 132,
            "column": 25
          }
        },
        {
          "incidentId": "268f8654-a238-4412-964f-dcbd469e04aa",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential = new NetworkCredential(\u0022admin\u0022, \u0022P@ssw0rd123!\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 132,
            "column": 29
          }
        },
        {
          "incidentId": "62d751ff-bfc1-4680-843f-aaaa5854a2dd",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential1 = new NetworkCredential(\u0022admin\u0022, \u0022P@ssw0rd123!\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 170,
            "column": 26
          }
        },
        {
          "incidentId": "2ec31330-af6d-40f3-b92f-eb54fa958f05",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential1 = new NetworkCredential(\u0022admin\u0022, \u0022P@ssw0rd123!\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 170,
            "column": 30
          }
        },
        {
          "incidentId": "c0f753ac-7766-48ca-808b-3a78390fa70e",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential2 = new NetworkCredential(\u0022user\u0022, \u0022SecretPassword456!\u0022, \u0022domain\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 171,
            "column": 26
          }
        },
        {
          "incidentId": "89367f47-15f6-462a-947c-9baa19e41863",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var credential2 = new NetworkCredential(\u0022user\u0022, \u0022SecretPassword456!\u0022, \u0022domain\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 171,
            "column": 30
          }
        },
        {
          "incidentId": "63aa7036-2c29-4edb-8959-308ca3fb5f51",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var networkCredential = new NetworkCredential(\u0022admin\u0022, \u0022P@ssw0rd123!\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 76,
            "column": 32
          }
        },
        {
          "incidentId": "fe08efa7-2493-46a1-8bf4-53f5b40c18d8",
          "ruleId": "Security.0004",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\HomeController.cs",
            "snippet": "var networkCredential = new NetworkCredential(\u0022admin\u0022, \u0022P@ssw0rd123!\u0022);",
            "label": "System.Net.NetworkCredential",
            "line": 76,
            "column": 36
          }
        },
        {
          "incidentId": "0df25821-380b-46ec-a516-f0b273ec53d0",
          "ruleId": "Perf.0001",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\SecurityController.cs",
            "snippet": "var result = command.ExecuteScalar();",
            "label": "Microsoft.Data.SqlClient.SqlCommand.ExecuteScalar",
            "line": 15,
            "column": 25
          }
        },
        {
          "incidentId": "d2bc1178-012b-441a-8c16-ff698d68f221",
          "ruleId": "Security.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Controllers\\SecurityController.cs",
            "snippet": "string connectionString = \u0022Server=myServer;Database=myDb;User Id=admin;Password=P@ssw0rd123!;\u0022;",
            "label": "password",
            "line": 9,
            "column": 38
          }
        },
        {
          "incidentId": "fbedb196-89e9-4dbe-9570-b049b68d5308",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "_messages.Add(new Message(\u0022Message 1\u0022, new BinaryMessageFormatter()));",
            "label": "System.Messaging.Message",
            "line": 178,
            "column": 30
          }
        },
        {
          "incidentId": "bcef1de8-235b-4bf2-8d0c-10bfb2346fc2",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "_messages.Add(new Message(\u0022Message 1\u0022, new BinaryMessageFormatter()));",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 178,
            "column": 55
          }
        },
        {
          "incidentId": "686dd61c-2d4e-42fb-b510-ff21c6e791c9",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "_messages.Add(new Message(\u0022Message 2\u0022, new BinaryMessageFormatter()));",
            "label": "System.Messaging.Message",
            "line": 179,
            "column": 30
          }
        },
        {
          "incidentId": "4a404feb-4e02-4b41-992b-a6232ae8e50d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "_messages.Add(new Message(\u0022Message 2\u0022, new BinaryMessageFormatter()));",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 179,
            "column": 55
          }
        },
        {
          "incidentId": "70b158ba-c217-4ffb-8e64-6608cb4e3715",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "DefaultPropertiesToSend = new DefaultPropertiesToSend();",
            "label": "System.Messaging.DefaultPropertiesToSend",
            "line": 37,
            "column": 42
          }
        },
        {
          "incidentId": "30b63e80-98bc-4adf-8dbd-c5d132734ec4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "DefaultPropertiesToSend",
            "label": "System.Messaging.DefaultPropertiesToSend",
            "line": 31,
            "column": 15
          }
        },
        {
          "incidentId": "55f6c391-bb4e-4583-8fff-318c11e2dd3b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 36,
            "column": 28
          }
        },
        {
          "incidentId": "a5b74016-abf2-4aac-88f4-2582856c195f",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "IMessageFormatter",
            "label": "System.Messaging.IMessageFormatter",
            "line": 113,
            "column": 36
          }
        },
        {
          "incidentId": "60b7799f-4bcd-410a-9501-00cf066e01e8",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "IMessageFormatter",
            "label": "System.Messaging.IMessageFormatter",
            "line": 123,
            "column": 42
          }
        },
        {
          "incidentId": "125b7f1b-0e8c-4e3f-aa6d-479a4e2b5b45",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "IMessageFormatter",
            "label": "System.Messaging.IMessageFormatter",
            "line": 128,
            "column": 39
          }
        },
        {
          "incidentId": "50e9b08b-2961-489e-ab9e-0cf1bd5ebf49",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "IMessageFormatter",
            "label": "System.Messaging.IMessageFormatter",
            "line": 30,
            "column": 15
          }
        },
        {
          "incidentId": "6b168a9d-7c15-42b1-b811-f6b22efbac65",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Message",
            "label": "System.Messaging.Message",
            "line": 173,
            "column": 30
          }
        },
        {
          "incidentId": "5429fc30-7543-4c82-b8fc-fb86d589d310",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Message",
            "label": "System.Messaging.Message",
            "line": 189,
            "column": 15
          }
        },
        {
          "incidentId": "d151308d-efb6-47f4-98c6-dd6725f4b48d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Message",
            "label": "System.Messaging.Message",
            "line": 52,
            "column": 25
          }
        },
        {
          "incidentId": "f63acd3d-1b93-4b59-858b-c08cfec46980",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Message",
            "label": "System.Messaging.Message",
            "line": 59,
            "column": 15
          }
        },
        {
          "incidentId": "1508c0c9-c73e-4723-b7c6-cd8162339406",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Message",
            "label": "System.Messaging.Message",
            "line": 69,
            "column": 15
          }
        },
        {
          "incidentId": "9bc082cd-11e5-4768-b010-a5ac90a34a63",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "Message",
            "label": "System.Messaging.Message",
            "line": 81,
            "column": 15
          }
        },
        {
          "incidentId": "0e0311a5-cf4d-4aee-91ad-739a1388c6b7",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessageEnumerator",
            "label": "System.Messaging.MessageEnumerator",
            "line": 75,
            "column": 15
          }
        },
        {
          "incidentId": "e89d62c1-8151-4a99-996e-fa3e2e8ccc01",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessagePriority",
            "label": "System.Messaging.MessagePriority",
            "line": 103,
            "column": 15
          }
        },
        {
          "incidentId": "462f0e0c-c1a2-45c8-b8db-9d7befddae84",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessagePriority",
            "label": "System.Messaging.MessagePriority",
            "line": 103,
            "column": 56
          }
        },
        {
          "incidentId": "5805f1c9-36aa-4b79-8299-ab5d681275fe",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessagePriority",
            "label": "System.Messaging.MessagePriority",
            "line": 200,
            "column": 15
          }
        },
        {
          "incidentId": "bfb3e8f0-3665-4875-b4b4-48d9b1581b36",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessagePriority",
            "label": "System.Messaging.MessagePriority",
            "line": 200,
            "column": 56
          }
        },
        {
          "incidentId": "1f59b0c1-122b-459f-b200-c1663eb254b4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessageQueue",
            "label": "System.Messaging.MessageQueue",
            "line": 46,
            "column": 22
          }
        },
        {
          "incidentId": "90f0098a-f80e-443d-a11a-53db117e29bd",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "MessageQueueTransaction",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 52,
            "column": 61
          }
        },
        {
          "incidentId": "93d9dc08-8362-4557-9b99-184d9f5918eb",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new Message(\u0022Peeked message content\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 72,
            "column": 23
          }
        },
        {
          "incidentId": "e6a59307-e21b-429c-bcf1-94da984854da",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new Message(\u0022Peeked message content\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 72,
            "column": 61
          }
        },
        {
          "incidentId": "19e9089c-4bc3-41b9-9171-862fd49047a1",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new Message(\u0022Received message content\u0022, new BinaryMessageFormatter())\r\n            {\r\n                ArrivedTime = DateTime.UtcNow,\r\n                SentTime = DateTime.UtcNow.AddMinutes(-1)\r\n            };",
            "label": "System.Messaging.Message",
            "line": 62,
            "column": 23
          }
        },
        {
          "incidentId": "efceb974-2f0a-4c2f-9ee9-67645c716ac0",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new Message(\u0022Received message content\u0022, new BinaryMessageFormatter())\r\n            {\r\n                ArrivedTime = DateTime.UtcNow,\r\n                SentTime = DateTime.UtcNow.AddMinutes(-1)\r\n            };",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 62,
            "column": 63
          }
        },
        {
          "incidentId": "87ee2cb5-644a-438f-98c5-daa901bc8282",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new Message($\u0022Message with ID: {id}\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 84,
            "column": 23
          }
        },
        {
          "incidentId": "d8a9d17d-2bcf-4e84-8968-bc8e2ea14b95",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new Message($\u0022Message with ID: {id}\u0022, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 84,
            "column": 61
          }
        },
        {
          "incidentId": "3bc560cd-d310-400e-8bbe-2a7a6cec2a34",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new MessageEnumerator();",
            "label": "System.Messaging.MessageEnumerator",
            "line": 78,
            "column": 23
          }
        },
        {
          "incidentId": "61b6718f-b418-4afd-a9d8-1f72493ee261",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Infrastructure\\SystemMessaging.cs",
            "snippet": "return new MessageQueue(path) { Transactional = transactional };",
            "label": "System.Messaging.MessageQueue",
            "line": 49,
            "column": 23
          }
        },
        {
          "incidentId": "07de0c2e-ab1b-466d-b363-c809e1d60b2c",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "if (!MessageQueue.Exists(config.Path))\r\n                {\r\n                    var queue = MessageQueue.Create(config.Path, config.Transactional);\r\n                    queue.Label = config.Label;\r\n                    \r\n                    // Set additional queue properties\r\n                    queue.DefaultPropertiesToSend.Recoverable = true;\r\n                    queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n                    queue.DefaultPropertiesToSend.UseJournalQueue = true;\r\n                    queue.DefaultPropertiesToSend.TimeToBeReceived = TimeSpan.FromHours(48);\r\n                    \r\n                    _logger.LogInformation(\u0022Created and configured MSMQ queue: {Path}, Transactional: {Transactional}\u0022, \r\n                                         config.Path, config.Transactional);\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 293,
            "column": 21
          }
        },
        {
          "incidentId": "a7962776-a3c1-457f-b662-9806dd38dbed",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "if (!MessageQueue.Exists(queuePath))\r\n                {\r\n                    MessageQueue.Create(queuePath, true); // transactional\r\n                    _logger.LogInformation(\u0022Created MSMQ queue: {QueuePath}\u0022, queuePath);\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 33,
            "column": 21
          }
        },
        {
          "incidentId": "09c6f0b4-f5af-496a-8679-d316f4081ec0",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "inventoryMessage.Priority = MessagePriority.Normal;",
            "label": "System.Messaging.MessagePriority",
            "line": 213,
            "column": 44
          }
        },
        {
          "incidentId": "fc72e70e-f487-47c6-a674-72ed7b7ac9b7",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "message.Priority = priority switch\r\n                    {\r\n                        \u0022High\u0022 =\u003E MessagePriority.High,\r\n                        \u0022Low\u0022 =\u003E MessagePriority.Low,\r\n                        _ =\u003E MessagePriority.Normal\r\n                    };",
            "label": "System.Messaging.MessagePriority",
            "line": 60,
            "column": 34
          }
        },
        {
          "incidentId": "bfe40587-e4e7-429d-abb9-a0bf441401f6",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "message.Priority = priority switch\r\n                    {\r\n                        \u0022High\u0022 =\u003E MessagePriority.High,\r\n                        \u0022Low\u0022 =\u003E MessagePriority.Low,\r\n                        _ =\u003E MessagePriority.Normal\r\n                    };",
            "label": "System.Messaging.MessagePriority",
            "line": 61,
            "column": 33
          }
        },
        {
          "incidentId": "c9de2616-9128-4863-acba-bf1f0934d66e",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "message.Priority = priority switch\r\n                    {\r\n                        \u0022High\u0022 =\u003E MessagePriority.High,\r\n                        \u0022Low\u0022 =\u003E MessagePriority.Low,\r\n                        _ =\u003E MessagePriority.Normal\r\n                    };",
            "label": "System.Messaging.MessagePriority",
            "line": 62,
            "column": 29
          }
        },
        {
          "incidentId": "760b1908-32ee-45fc-a2eb-f20fd7f5a85c",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "MessageQueue.Create(queuePath, true);",
            "label": "System.Messaging.MessageQueue",
            "line": 35,
            "column": 20
          }
        },
        {
          "incidentId": "e3e7bc9e-959d-402b-a5fe-49d108902415",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "MessageQueueTransaction",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 205,
            "column": 60
          }
        },
        {
          "incidentId": "4ecfaeb8-b3dc-4351-99a6-0b65e343a8bb",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "MessageQueueTransaction",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 220,
            "column": 58
          }
        },
        {
          "incidentId": "1fba4fac-9fa7-4800-9ef6-e6aa142cafef",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "orderMessage.Priority = MessagePriority.High;",
            "label": "System.Messaging.MessagePriority",
            "line": 95,
            "column": 44
          }
        },
        {
          "incidentId": "cc36f9e2-3f5a-491e-9d57-5a8eabf2abd0",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "paymentMessage.Priority = MessagePriority.High;",
            "label": "System.Messaging.MessagePriority",
            "line": 228,
            "column": 42
          }
        },
        {
          "incidentId": "6c573c89-fef0-4077-ad58-96b9be60a228",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "queue.Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 129,
            "column": 42
          }
        },
        {
          "incidentId": "eb5ffea4-7efe-434b-b248-20d6c5a56403",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "queue.Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 168,
            "column": 42
          }
        },
        {
          "incidentId": "1bba6ae3-eb61-4aae-b8ac-6c8b28ddee5d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "queue.Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 190,
            "column": 42
          }
        },
        {
          "incidentId": "5655a02e-1180-43a5-8517-666089d1166e",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "queue.Formatter = new BinaryMessageFormatter();",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 250,
            "column": 42
          }
        },
        {
          "incidentId": "ba9b4e33-1c22-4f96-909d-a7eb703d1fe1",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "try\r\n                        {\r\n                            queue.ReceiveById(messageId, TimeSpan.FromSeconds(5));\r\n                        }\r\n                        catch (MessageQueueException)\r\n                        {\r\n                            // Message already removed or expired\r\n                        }",
            "label": "System.Messaging.MessageQueueException",
            "line": 270,
            "column": 31
          }
        },
        {
          "incidentId": "aa93269b-129d-4eeb-8f1b-e22d7b2dd0a4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "try\r\n            {\r\n                // Azure Migrate Detection - Actual System.Messaging.MessageEnumerator usage\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messages.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Body = message.Body,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            ArrivedTime = message.ArrivedTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }\r\n\r\n                _logger.LogInformation(\u0022Browsed MSMQ queue {QueuePath} using MessageEnumerator, found {Count} messages\u0022, \r\n                                     queuePath, messages.Count);\r\n            }\r\n            catch (MessageQueueException ex)\r\n            {\r\n                _logger.LogError(ex, \u0022MSMQ Browse Error - MessageQueueException: {QueuePath}\u0022, queuePath);\r\n            }",
            "label": "System.Messaging.MessageQueueException",
            "line": 150,
            "column": 19
          }
        },
        {
          "incidentId": "5f50f874-09f4-49b2-9268-e52bd87b5573",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "try\r\n            {\r\n                // Azure Migrate Detection - Actual System.Messaging.MessageQueue instantiation\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Label = \u0022Order Processing Queue\u0022;\r\n                    queue.DefaultPropertiesToSend.Recoverable = true;\r\n                    queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n                    \r\n                    var message = new Message(orderData, new BinaryMessageFormatter());\r\n                    message.Priority = priority switch\r\n                    {\r\n                        \u0022High\u0022 =\u003E MessagePriority.High,\r\n                        \u0022Low\u0022 =\u003E MessagePriority.Low,\r\n                        _ =\u003E MessagePriority.Normal\r\n                    };\r\n                    message.UseDeadLetterQueue = true;\r\n                    message.UseJournalQueue = true;\r\n                    message.TimeToBeReceived = TimeSpan.FromHours(24);\r\n                    \r\n                    queue.Send(message, \u0022Order Message\u0022);\r\n                }\r\n\r\n                _logger.LogInformation(\u0022Order sent to MSMQ: {QueuePath} with priority {Priority}\u0022, queuePath, priority);\r\n            }\r\n            catch (MessageQueueException ex)\r\n            {\r\n                // Azure Migrate Detection - System.Messaging.MessageQueueException handling\r\n                _logger.LogError(ex, \u0022MSMQ Send Error - MessageQueueException: {QueuePath}\u0022, queuePath);\r\n                throw;\r\n            }",
            "label": "System.Messaging.MessageQueueException",
            "line": 73,
            "column": 19
          }
        },
        {
          "incidentId": "0abb281d-ab3c-49a9-bbd7-27aeb4465d2c",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "try\r\n            {\r\n                // Azure Migrate Detection - Actual System.Messaging.MessageQueue.Peek operation\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var message = queue.Peek(TimeSpan.FromSeconds(10));\r\n                    \r\n                    _logger.LogInformation(\u0022Peeked message ID: {MessageId} from MSMQ queue\u0022, message.Id);\r\n                    return message.Body;\r\n                }\r\n            }\r\n            catch (MessageQueueException ex)\r\n            {\r\n                _logger.LogError(ex, \u0022MSMQ Peek Error - MessageQueueException: {QueuePath}\u0022, queuePath);\r\n                return null;\r\n            }",
            "label": "System.Messaging.MessageQueueException",
            "line": 197,
            "column": 19
          }
        },
        {
          "incidentId": "769c4b2c-f5d5-4ff3-9648-4191edf8ae42",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "try\r\n            {\r\n                // Azure Migrate Detection - Actual System.Messaging.MessageQueue.Receive with timeout\r\n                using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var message = queue.Receive(TimeSpan.FromMinutes(5));\r\n                    \r\n                    _logger.LogInformation(\u0022Received message ID: {MessageId} from MSMQ queue\u0022, message.Id);\r\n                    return message.Body;\r\n                }\r\n            }\r\n            catch (MessageQueueException ex)\r\n            {\r\n                _logger.LogError(ex, \u0022MSMQ Receive Error - MessageQueueException: {QueuePath}\u0022, queuePath);\r\n                throw;\r\n            }",
            "label": "System.Messaging.MessageQueueException",
            "line": 175,
            "column": 19
          }
        },
        {
          "incidentId": "37c5ae39-b2ea-40c3-b2a3-528da32c440b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var inventoryQueue = new MessageQueue(inventoryQueuePath))\r\n            {\r\n                var inventoryMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                inventoryMessage.Priority = MessagePriority.Normal;\r\n                inventoryQueue.Send(inventoryMessage, \u0022Inventory Update\u0022, transaction);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 210,
            "column": 19
          }
        },
        {
          "incidentId": "f068f46c-a3b2-4d82-9aca-5f209745ec70",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var inventoryQueue = new MessageQueue(inventoryQueuePath))\r\n            {\r\n                var inventoryMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                inventoryMessage.Priority = MessagePriority.Normal;\r\n                inventoryQueue.Send(inventoryMessage, \u0022Inventory Update\u0022, transaction);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 210,
            "column": 44
          }
        },
        {
          "incidentId": "4d467cdd-0988-430a-92c4-4a2d384e3b99",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var paymentQueue = new MessageQueue(paymentQueuePath))\r\n            {\r\n                var paymentMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                paymentMessage.Priority = MessagePriority.High;\r\n                paymentQueue.Send(paymentMessage, \u0022Payment Processing\u0022, transaction);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 225,
            "column": 19
          }
        },
        {
          "incidentId": "6ff1f2de-b75d-425e-a8dd-fdec7412cda3",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var paymentQueue = new MessageQueue(paymentQueuePath))\r\n            {\r\n                var paymentMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                paymentMessage.Priority = MessagePriority.High;\r\n                paymentQueue.Send(paymentMessage, \u0022Payment Processing\u0022, transaction);\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 225,
            "column": 42
          }
        },
        {
          "incidentId": "bc7e3f9c-1450-4347-9c34-957ca3e320bb",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messages.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Body = message.Body,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            ArrivedTime = message.ArrivedTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 127,
            "column": 23
          }
        },
        {
          "incidentId": "cf88099b-361c-4505-b9f3-0f91ea0a50cd",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(5)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        messages.Add(new\r\n                        {\r\n                            Id = message.Id,\r\n                            Body = message.Body,\r\n                            Priority = message.Priority,\r\n                            SentTime = message.SentTime,\r\n                            ArrivedTime = message.ArrivedTime,\r\n                            UseDeadLetterQueue = message.UseDeadLetterQueue\r\n                        });\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 127,
            "column": 39
          }
        },
        {
          "incidentId": "0f1a7184-25fe-40cd-9bc5-910f890acf73",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    var messagesToDelete = new List\u003Cstring\u003E();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(1)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        if (message.SentTime \u003C DateTime.UtcNow.AddDays(-7))\r\n                        {\r\n                            messagesToDelete.Add(message.Id);\r\n                        }\r\n                    }\r\n                    \r\n                    // Remove old messages\r\n                    foreach (var messageId in messagesToDelete)\r\n                    {\r\n                        try\r\n                        {\r\n                            queue.ReceiveById(messageId, TimeSpan.FromSeconds(5));\r\n                        }\r\n                        catch (MessageQueueException)\r\n                        {\r\n                            // Message already removed or expired\r\n                        }\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 248,
            "column": 23
          }
        },
        {
          "incidentId": "5b661cda-b9a6-4c42-9e9e-bafbf5d6679e",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var enumerator = queue.GetMessageEnumerator();\r\n                    var messagesToDelete = new List\u003Cstring\u003E();\r\n                    \r\n                    while (enumerator.MoveNext(TimeSpan.FromSeconds(1)))\r\n                    {\r\n                        var message = enumerator.Current;\r\n                        if (message.SentTime \u003C DateTime.UtcNow.AddDays(-7))\r\n                        {\r\n                            messagesToDelete.Add(message.Id);\r\n                        }\r\n                    }\r\n                    \r\n                    // Remove old messages\r\n                    foreach (var messageId in messagesToDelete)\r\n                    {\r\n                        try\r\n                        {\r\n                            queue.ReceiveById(messageId, TimeSpan.FromSeconds(5));\r\n                        }\r\n                        catch (MessageQueueException)\r\n                        {\r\n                            // Message already removed or expired\r\n                        }\r\n                    }\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 248,
            "column": 39
          }
        },
        {
          "incidentId": "60c7aa8d-7870-4751-919a-da57dc52daf4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var message = queue.Peek(TimeSpan.FromSeconds(10));\r\n                    \r\n                    _logger.LogInformation(\u0022Peeked message ID: {MessageId} from MSMQ queue\u0022, message.Id);\r\n                    return message.Body;\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 188,
            "column": 23
          }
        },
        {
          "incidentId": "19684d12-57be-490d-89af-ae53d10bbc86",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var message = queue.Peek(TimeSpan.FromSeconds(10));\r\n                    \r\n                    _logger.LogInformation(\u0022Peeked message ID: {MessageId} from MSMQ queue\u0022, message.Id);\r\n                    return message.Body;\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 188,
            "column": 39
          }
        },
        {
          "incidentId": "aed153d3-5080-4a7d-9417-0f7ec1d72fcf",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var message = queue.Receive(TimeSpan.FromMinutes(5));\r\n                    \r\n                    _logger.LogInformation(\u0022Received message ID: {MessageId} from MSMQ queue\u0022, message.Id);\r\n                    return message.Body;\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 166,
            "column": 23
          }
        },
        {
          "incidentId": "c0834a9c-fc5d-41b3-bb42-0c93dca246c5",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Formatter = new BinaryMessageFormatter();\r\n                    var message = queue.Receive(TimeSpan.FromMinutes(5));\r\n                    \r\n                    _logger.LogInformation(\u0022Received message ID: {MessageId} from MSMQ queue\u0022, message.Id);\r\n                    return message.Body;\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 166,
            "column": 39
          }
        },
        {
          "incidentId": "a18aae6d-17f4-4575-9852-12a9878d7578",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Label = \u0022Order Processing Queue\u0022;\r\n                    queue.DefaultPropertiesToSend.Recoverable = true;\r\n                    queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n                    \r\n                    var message = new Message(orderData, new BinaryMessageFormatter());\r\n                    message.Priority = priority switch\r\n                    {\r\n                        \u0022High\u0022 =\u003E MessagePriority.High,\r\n                        \u0022Low\u0022 =\u003E MessagePriority.Low,\r\n                        _ =\u003E MessagePriority.Normal\r\n                    };\r\n                    message.UseDeadLetterQueue = true;\r\n                    message.UseJournalQueue = true;\r\n                    message.TimeToBeReceived = TimeSpan.FromHours(24);\r\n                    \r\n                    queue.Send(message, \u0022Order Message\u0022);\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 51,
            "column": 23
          }
        },
        {
          "incidentId": "babca10a-c371-4df4-b323-387b18eb0ee0",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n                {\r\n                    queue.Label = \u0022Order Processing Queue\u0022;\r\n                    queue.DefaultPropertiesToSend.Recoverable = true;\r\n                    queue.DefaultPropertiesToSend.UseDeadLetterQueue = true;\r\n                    \r\n                    var message = new Message(orderData, new BinaryMessageFormatter());\r\n                    message.Priority = priority switch\r\n                    {\r\n                        \u0022High\u0022 =\u003E MessagePriority.High,\r\n                        \u0022Low\u0022 =\u003E MessagePriority.Low,\r\n                        _ =\u003E MessagePriority.Normal\r\n                    };\r\n                    message.UseDeadLetterQueue = true;\r\n                    message.UseJournalQueue = true;\r\n                    message.TimeToBeReceived = TimeSpan.FromHours(24);\r\n                    \r\n                    queue.Send(message, \u0022Order Message\u0022);\r\n                }",
            "label": "System.Messaging.MessageQueue",
            "line": 51,
            "column": 39
          }
        },
        {
          "incidentId": "ced8433a-c6fc-4da3-b2bb-d43de4511d6b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n            using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                    orderMessage.Priority = MessagePriority.High;\r\n                    orderMessage.UseDeadLetterQueue = true;\r\n                    orderMessage.Recoverable = true;\r\n                    \r\n                    queue.Send(orderMessage, \u0022Transactional Order\u0022, transaction);\r\n                    \r\n                    // Additional transactional operations...\r\n                    SendToInventoryQueue(orderData, transaction);\r\n                    SendToPaymentQueue(orderData, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    _logger.LogInformation(\u0022MSMQ transaction committed successfully\u0022);\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    _logger.LogError(\u0022MSMQ transaction aborted\u0022);\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 87,
            "column": 19
          }
        },
        {
          "incidentId": "e22f48f6-529d-435b-80ab-4a44b5e19abe",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var queue = new MessageQueue(queuePath))\r\n            using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                    orderMessage.Priority = MessagePriority.High;\r\n                    orderMessage.UseDeadLetterQueue = true;\r\n                    orderMessage.Recoverable = true;\r\n                    \r\n                    queue.Send(orderMessage, \u0022Transactional Order\u0022, transaction);\r\n                    \r\n                    // Additional transactional operations...\r\n                    SendToInventoryQueue(orderData, transaction);\r\n                    SendToPaymentQueue(orderData, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    _logger.LogInformation(\u0022MSMQ transaction committed successfully\u0022);\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    _logger.LogError(\u0022MSMQ transaction aborted\u0022);\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueue",
            "line": 87,
            "column": 35
          }
        },
        {
          "incidentId": "b61ebef1-0bc8-488e-87c3-b1e10bf47687",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                    orderMessage.Priority = MessagePriority.High;\r\n                    orderMessage.UseDeadLetterQueue = true;\r\n                    orderMessage.Recoverable = true;\r\n                    \r\n                    queue.Send(orderMessage, \u0022Transactional Order\u0022, transaction);\r\n                    \r\n                    // Additional transactional operations...\r\n                    SendToInventoryQueue(orderData, transaction);\r\n                    SendToPaymentQueue(orderData, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    _logger.LogInformation(\u0022MSMQ transaction committed successfully\u0022);\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    _logger.LogError(\u0022MSMQ transaction aborted\u0022);\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 88,
            "column": 19
          }
        },
        {
          "incidentId": "1269e11e-4d30-4c71-8add-ba5475146d42",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "using (var transaction = new MessageQueueTransaction())\r\n            {\r\n                transaction.Begin();\r\n                \r\n                try\r\n                {\r\n                    var orderMessage = new Message(orderData, new BinaryMessageFormatter());\r\n                    orderMessage.Priority = MessagePriority.High;\r\n                    orderMessage.UseDeadLetterQueue = true;\r\n                    orderMessage.Recoverable = true;\r\n                    \r\n                    queue.Send(orderMessage, \u0022Transactional Order\u0022, transaction);\r\n                    \r\n                    // Additional transactional operations...\r\n                    SendToInventoryQueue(orderData, transaction);\r\n                    SendToPaymentQueue(orderData, transaction);\r\n                    \r\n                    transaction.Commit();\r\n                    _logger.LogInformation(\u0022MSMQ transaction committed successfully\u0022);\r\n                }\r\n                catch\r\n                {\r\n                    transaction.Abort();\r\n                    _logger.LogError(\u0022MSMQ transaction aborted\u0022);\r\n                    throw;\r\n                }\r\n            }",
            "label": "System.Messaging.MessageQueueTransaction",
            "line": 88,
            "column": 41
          }
        },
        {
          "incidentId": "545a8aa9-974e-4665-8220-a6f76e4736c4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var enumerator = queue.GetMessageEnumerator();",
            "label": "System.Messaging.MessageEnumerator",
            "line": 130,
            "column": 20
          }
        },
        {
          "incidentId": "c62821a4-20c1-40b1-9587-8ac593fc5120",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var enumerator = queue.GetMessageEnumerator();",
            "label": "System.Messaging.MessageEnumerator",
            "line": 251,
            "column": 20
          }
        },
        {
          "incidentId": "f7e3a6c8-7a91-4bd8-87f9-ee9e21f4dce4",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var inventoryMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 212,
            "column": 16
          }
        },
        {
          "incidentId": "ea8c64b0-958a-4d07-b2e1-e195b83e8663",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var inventoryMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 212,
            "column": 43
          }
        },
        {
          "incidentId": "953f8197-9faa-46ce-860c-49cbe21f5e83",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var inventoryMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 212,
            "column": 66
          }
        },
        {
          "incidentId": "bceb3d61-378a-42fd-b7e8-4d3bf329dce5",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = enumerator.Current;",
            "label": "System.Messaging.Message",
            "line": 134,
            "column": 24
          }
        },
        {
          "incidentId": "4a53f7e9-1ec0-4cc2-9cf0-a93249958e19",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = enumerator.Current;",
            "label": "System.Messaging.Message",
            "line": 256,
            "column": 24
          }
        },
        {
          "incidentId": "d6f86622-0ee1-4384-8038-9af97295bb2c",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 57,
            "column": 20
          }
        },
        {
          "incidentId": "d1288c62-093e-42a9-b4ee-26005252c499",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 57,
            "column": 38
          }
        },
        {
          "incidentId": "2433ac8e-b700-4cdb-a567-ad6e381f336d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 57,
            "column": 61
          }
        },
        {
          "incidentId": "54e919d6-9f93-41bc-b6f0-428ca17a33f9",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = queue.Peek(TimeSpan.FromSeconds(10));",
            "label": "System.Messaging.Message",
            "line": 191,
            "column": 20
          }
        },
        {
          "incidentId": "e8eadf4b-a199-418e-91c9-647264b1132e",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var message = queue.Receive(TimeSpan.FromMinutes(5));",
            "label": "System.Messaging.Message",
            "line": 169,
            "column": 20
          }
        },
        {
          "incidentId": "41278823-c20d-4b8c-a22e-1448dd097c6b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var orderMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 94,
            "column": 20
          }
        },
        {
          "incidentId": "18acb59b-0a5b-4d00-846d-6a857618db3f",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var orderMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 94,
            "column": 43
          }
        },
        {
          "incidentId": "04d888b5-421f-407c-80c1-ce923992652b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var orderMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 94,
            "column": 66
          }
        },
        {
          "incidentId": "202dae79-13d6-435d-8d18-09bb953f4e5b",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var paymentMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 227,
            "column": 16
          }
        },
        {
          "incidentId": "faf92d44-bac5-464f-9e7c-e61c201df49d",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var paymentMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.Message",
            "line": 227,
            "column": 41
          }
        },
        {
          "incidentId": "0e42a078-aeab-4bd0-a271-805d6deed247",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var paymentMessage = new Message(orderData, new BinaryMessageFormatter());",
            "label": "System.Messaging.BinaryMessageFormatter",
            "line": 227,
            "column": 64
          }
        },
        {
          "incidentId": "996d1d44-0664-4bb8-a7aa-d02d38be8588",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var queue = MessageQueue.Create(config.Path, config.Transactional);",
            "label": "System.Messaging.MessageQueue",
            "line": 295,
            "column": 20
          }
        },
        {
          "incidentId": "e8a34ef3-d6d9-4531-8aac-c844b662b377",
          "ruleId": "Queue.0003",
          "projectPath": "factory-dotnetcore-copilot-code-remediation.csproj",
          "state": "Active",
          "location": {
            "kind": "File",
            "path": "Services\\MSMQService.cs",
            "snippet": "var queue = MessageQueue.Create(config.Path, config.Transactional);",
            "label": "System.Messaging.MessageQueue",
            "line": 295,
            "column": 32
          }
        }
      ]
    }
  ],
  "rules": {
    "Scale.0001": {
      "id": "Scale.0001",
      "description": "Static content detected.\n\nYour current approach of serving static content directly might lead to increased costs, performance issues, maintenance challenges (requiring application redeployment for content changes), and security risks.\n\nConsider moving static content to Azure Blob Storage and adding Azure CDN.",
      "label": "Static content detected",
      "severity": "Optional",
      "effort": 3,
      "links": [
        {
          "title": "Azure Blob Storage",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250574"
        },
        {
          "title": "Azure CDN",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250392"
        }
      ]
    },
    "HTTP.0002": {
      "id": "HTTP.0002",
      "description": "Non HTTP(s) communication detected.\n\nWhen hosted on Azure App Service, it only handles requests over HTTP/S and on ports 80 and 443. Applications that allow communications via other protocols or ports need to be hosted in a VM or container with custom configuration.",
      "label": "Non HTTP(s) communication detected",
      "severity": "Mandatory",
      "effort": 5,
      "links": [
        {
          "title": "Networking considerations for App Service Environment",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250982"
        },
        {
          "title": "App Service networking features",
          "url": "https://go.microsoft.com/fwlink/?linkid=2251216"
        },
        {
          "title": "Virtual machines in Azure",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250983"
        },
        {
          "title": "Virtual networks and virtual machines in Azure",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250984"
        }
      ]
    },
    "Security.0002": {
      "id": "Security.0002",
      "description": "Connection strings without configuration builders detected.  \n\n Keeping connection strings directly in the app is not the best practice and might introduce security risks, increased maintenance, scalability challenges or compliance standards (such as PCI DSS, GDPR, etc.). \n\n Instead, it is recommended to use configuration builders to get secrets from secure sources in Azure environment.",
      "label": "Connection strings without configuration builders detected",
      "severity": "Optional",
      "effort": 3,
      "links": [
        {
          "title": "Configuration builders",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2250915"
        },
        {
          "title": "Storing application secrets",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2250916"
        },
        {
          "title": "Centralized app configuration and security",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2250733"
        }
      ]
    },
    "Security.0003": {
      "id": "Security.0003",
      "description": "Hardcoded sensitive data detected. \n\n Avoid placing sensitive data such as passwords, ids, tokens etc., directly in config files and code since it compromises the security of your application. \n\n Use Azure App Configuration or Azure KeyVault to store secrets.",
      "label": "Hardcoded sensitive data detected",
      "severity": "Optional",
      "effort": 3,
      "links": [
        {
          "title": "Centralized app configuration and security",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2250733"
        }
      ]
    },
    "Connection.0001": {
      "id": "Connection.0001",
      "description": "Connection string detected. It may not be available when your app is migrated to Azure.\n\nReview and ensure it works from Azure. If you are connecting to a database, you might need to migrate the database to Azure. There are multiple ways to do it:\n    1. Migrate to Azure SQL Database for additional benefits (see the link below).\n    2. Consider Azure SQL Managed Instance if you need features that are not available in Azure SQL Database and you don\u2019t want to use a VM.\n    3. Migrate your database servers directly to SQL Server on Azure VMs.\n\nTo assess database migration effort, you can use Azure Migrate tool, see the link below.",
      "label": "Connection string is detected",
      "severity": "Potential",
      "effort": 3,
      "links": [
        {
          "title": "Migrate SQL Server database to Azure",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251731"
        },
        {
          "title": "Azure SQL Managed Instance",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251613"
        },
        {
          "title": "Azure Migrate",
          "url": "https://go.microsoft.com/fwlink/?linkid=2252410"
        }
      ]
    },
    "Cache.0001": {
      "id": "Cache.0001",
      "description": "Your application is using a data cache.\n\nSome caching solutions will only work on the local machine or within an on-premises network. Make sure that the cache your app is working with is available from Azure.\n\nUse the link below to learn how caching solutions could be implemented in Azure.",
      "label": "Data caching is detected",
      "severity": "Potential",
      "effort": 3,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242978"
        }
      ]
    },
    "Identity.0002": {
      "id": "Identity.0002",
      "description": "Your app is using windows authentication which is not supported on Azure App Service, Azure Container Apps and Azure Kubernetes Service.\n\nAzure App Service provides built-in authentication and authorization capabilities, so you can sign in users and access data by writing minimal or no code in your web app.\n\nFollow the link below for more information.\u0022",
      "label": "Windows authentication detected",
      "severity": "Mandatory",
      "effort": 3,
      "links": [
        {
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242883"
        }
      ]
    },
    "Security.0101": {
      "id": "Security.0101",
      "description": "Windows Authentication (Negotiate) detected. The application is using Windows Authentication via Negotiate protocol which may not work as expected in Azure App Service. Consider using Azure Active Directory (Azure AD) authentication instead for better cloud compatibility and security.",
      "label": "Windows Authentication (Negotiate) detected",
      "severity": "Potential",
      "effort": 5,
      "links": [
        {
          "title": "Azure AD authentication for ASP.NET Core",
          "url": "https://learn.microsoft.com/azure/active-directory/develop/quickstart-v2-aspnet-core-webapp"
        },
        {
          "title": "Migrate from Windows Authentication to Azure AD",
          "url": "https://learn.microsoft.com/azure/active-directory/develop/scenario-web-app-sign-user-overview"
        }
      ]
    },
    "Database.0002": {
      "id": "Database.0002",
      "description": "SQL database connection detected.\n\nEnsure the database is available/reachable on Azure.\n\nIf it is not, there are multiple ways you can move your data to Azure:\n    1. Migrate to Azure SQL Database.\n    2. Consider Azure SQL Managed Instance if you need features that are not available in Azure SQL Database and you don\u2019t want to use a VM.\n    3. Migrate your database servers directly to SQL Server on Azure VMs.\n\nTo assess database migration effort, you can use Azure Migrate tool, see the link below.",
      "label": "SQL database connection detected",
      "severity": "Potential",
      "effort": 3,
      "links": [
        {
          "title": "Migrate SQL Server database to Azure",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251731"
        },
        {
          "title": "Azure SQL Managed Instance",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251613"
        },
        {
          "title": "Azure Migrate",
          "url": "https://go.microsoft.com/fwlink/?linkid=2252410"
        }
      ]
    },
    "HTTP.0001": {
      "id": "HTTP.0001",
      "description": "Your application is trying to reach external resources via HTTP protocol.\n\nEnsure the resources it is trying to reach are accessible from the Azure environment. If those HTTP requests are sent to internal services or services hosted on-prem, you probably will need to migrate those services to Azure as well.\n\nAlso, keep in mind that Azure App Service supports port 80 for HTTP and port 443 for HTTPS traffic. If you are using any other ports, you need to update them before moving to Azure.",
      "label": "Access to external resources via HTTP is detected",
      "severity": "Potential",
      "effort": 3,
      "links": [
        {
          "title": "Azure App Service networking features",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2243264"
        }
      ]
    },
    "Local.0001": {
      "id": "Local.0001",
      "description": "Windows local system features usage detected.\n\nWindows features like registry access, starting processes via shell, access to COM objects, using standard OS dialogs etc, will be restricted on Azure App Service. This indicates that your application might be broken in App Service sandbox environment or not scale well.\n\nIf you choose to use containerized Azure hosting options with Windows container, such as Azure AppService sandbox for Windows container, Azure Container Apps (ACA) or Azure Kubernetes Service (AKS), some scenarios might work, however scaling still might be an issue.\n\nRecommendations:\n    1. Avoid using Windows registry or default Windows UI elements and dialogs.\n    2. If your application needs to read app-specific configuration, you can use the App Settings feature of Azure App Service, which allows you to store key-value pairs of configuration data for your application. You can access these settings from your code using environment variables. Another option is to use Azure App Configuration and Azure Key Vault to share application settings in a cloud-native way.\n    3. If your application is writing data (like machine-wide settings cache), use an external data store like Azure SQL DB or Azure Cache for Redis.\n    4. Instead of starting local worker processes use Azure Functions.",
      "label": "Windows local system features usage detected",
      "severity": "Mandatory",
      "effort": 3,
      "links": [
        {
          "title": "General App Service sandbox restrictions",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250496"
        },
        {
          "title": "App Service sandbox for Windows Container Web Apps",
          "url": "https://go.microsoft.com/fwlink/?linkid=2251963"
        },
        {
          "title": "Design to scale out",
          "url": "https://go.microsoft.com/fwlink/?linkid=2251007"
        },
        {
          "title": "Azure Functions",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251810"
        },
        {
          "title": "App Settings",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242590"
        },
        {
          "title": "Azure Key Vault",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251612"
        },
        {
          "title": "Azure App Configuration",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251640"
        }
      ]
    },
    "Local.0002": {
      "id": "Local.0002",
      "description": "Your application has hardcoded local or network paths that might not be available on Azure.\n\nReview and ensure that you are attempting to access paths that would be available when your application lives in Azure.\n\n Application should use paths relative to application root folder or store them in Azure Storage or Azure CDN.",
      "label": "Hardcoded local or network paths detected",
      "severity": "Mandatory",
      "effort": 1,
      "links": [
        {
          "title": "Azure Storage",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2243159"
        },
        {
          "title": "Azure CDN",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2251637"
        },
        {
          "title": "Design to scale out",
          "url": "https://go.microsoft.com/fwlink/?linkid=2251007"
        }
      ]
    },
    "Local.0003": {
      "id": "Local.0003",
      "description": "Your application has local or network IO operations.\n\nIO operations outside of the application folder might not be available on Azure App Service. Review and ensure IO APIs are attempting to access paths that will be available when your app is running on App Service sandbox. If you choose the containerized hosting option, your scenario still might be broken or have scalability issues.\n\nPossible solutions:\n    1. Files that the application needs can be deployed with the application or put in Azure Storage. You can use Azure Storage File Shares as a drop-in replacement for on-premises file share.\n    2. Other services that the application depends on might need to be migrated to Azure, this way you will get the benefit of lower latency in the cloud.\n    3. If your application needs to depend on services that run on-premise, you can connect your Azure and local networks with ExpressRoute, Hybrid Connections, or VPN solutions.",
      "label": "Local or network IO operations detected",
      "severity": "Potential",
      "effort": 3,
      "links": [
        {
          "title": "Azure file share",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242591"
        },
        {
          "title": "ExpressRoute",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2250577"
        },
        {
          "title": "Hybrid Connections",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242588"
        },
        {
          "title": "Connect an on-prem network",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242591"
        },
        {
          "title": "Design to scale out",
          "url": "https://go.microsoft.com/fwlink/?linkid=2251007"
        }
      ]
    },
    "Local.0006": {
      "id": "Local.0006",
      "description": "Your application has hardcoded URLs that might correspond to services that are not accessible on Azure.\n\nReview and ensure that the application is attempting to access URLs that would be available from Azure. You might need to migrate those services to Azure too, this way you will get the benefit of lower latency in the cloud.\n\nIf your application needs to depend on services that run on-premises, you can connect your Azure and local networks with ExpressRoute, Hybrid Connections, or VPN solutions.",
      "label": "Hardcoded URLs detected",
      "severity": "Potential",
      "effort": 1,
      "links": [
        {
          "title": "ExpressRoute",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2250577"
        },
        {
          "title": "Hybrid Connections",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242588"
        },
        {
          "title": "Connect an on-prem network",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242591"
        }
      ]
    },
    "Perf.0001": {
      "id": "Perf.0001",
      "description": "Synchronous API usage detected.\n\nUsing synchronous APIs can lead to more performance issues in Azure compared to on-premises environments due to different latency profiles. Consider adopting asynchronous code patterns.\n\nIn heavily loaded systems, especially where the I/O is substantial, using asynchronous patterns can improve overall throughput and performance. Asynchronous APIs enable a small pool of threads to manage thousands of concurrent requests without waiting on blocking calls. Instead of waiting for a long-running synchronous task to finish, the thread can handle another request. Conversely, numerous synchronous blocking calls can cause thread pool starvation and degrade response times.\n\nRefer to the links below to learn more about asynchronous programming.",
      "label": "Synchronous API usage detected",
      "severity": "Optional",
      "effort": 1,
      "links": [
        {
          "title": "Asynchronous programming",
          "url": "https://go.microsoft.com/fwlink/?linkid=2294824"
        },
        {
          "title": "ASP.NET Core Best Practices: avoid blocking calls",
          "url": "https://go.microsoft.com/fwlink/?linkid=2294727"
        }
      ]
    },
    "Queue.0003": {
      "id": "Queue.0003",
      "description": "You are using MSMQ that is not currently supported in Azure App and containerized app. You can use Azure Queue Storage or Service Bus queues instead of MSMQ. Another option is to run MSMQ in Azure Virtual Machines.",
      "label": "MSMQ usage is detected",
      "severity": "Mandatory",
      "effort": 3,
      "links": [
        {
          "title": "Azure Queue Storage",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2242589"
        },
        {
          "title": "Service Bus queues",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2243266"
        },
        {
          "title": "Comparison of Azure Queue Storage and Service Bus queue",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2249263"
        },
        {
          "title": "Running MSMQ in Azure VM",
          "url": "https://go.microsoft.com/fwlink/?LinkID=2249370"
        }
      ]
    },
    "Security.0004": {
      "id": "Security.0004",
      "description": "Explicit password-based credentials usage is detected.\n\nEnsure that the dependencies accessed with the credentials and the authentication mechanism used will both work from the target Azure environment.\n\nAlso, consider replacing explicit credential usage with passwordless alternatives. When credentials are loaded from secure sources it might be OK, however it is considered the best practice for Azure applications to use password-less authentication (via managed identity for example) or to store secrets and passwords in Azure App Configuration or Azure KeyVault.",
      "label": "Explicit password-based credentials usage is detected",
      "severity": "Potential",
      "effort": 3,
      "links": [
        {
          "title": "Use managed identities for Azure App Service",
          "url": "https://go.microsoft.com/fwlink/?linkid=2250759"
        }
      ]
    }
  }
}